#!/usr/bin/env python3
#
# Output of Brainome Daimensions(tm) Table Compiler v0.5.
# Compile time: Feb-11-2020 18:25:17
# Invocation: btc -v phpPIHVvG-5.csv -o phpPIHVvG-5.py
# This source code requires Python 3.
#
"""
System Type:                        Binary classifier
Best-guess accuracy:                86.00%
Model accuracy:                     98.50% (3230/3279 correct)
Improvement over best guess:        12.50% (of possible 14.0%)
Model capacity (MEC):               3121 bits
Generalization ratio:               1.03 bits/bit
Model efficiency:                   0.00%/parameter
System behavior
True Negatives:                     85.67% (2809/3279)
True Positives:                     12.84% (421/3279)
False Negatives:                    1.16% (38/3279)
False Positives:                    0.34% (11/3279)
True Pos. Rate/Sensitivity/Recall:  0.92
True Neg. Rate/Specificity:         1.00
Precision:                          0.97
F-1 Measure:                        0.95
False Negative Rate/Miss Rate:      0.08
Critical Success Index:             0.90
Model bias:                         0.76% higher chance to pick class 0
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii


# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF=100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE="phpPIHVvG-5.csv"


#Number of output logits
num_output_logits = 1

#Number of attributes
num_attr = 1558

# Preprocessor for CSV files
def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    
    clean.classlist=[]
    clean.testfile=testfile
    
    def convert(cell):
        value=str(cell)
        try:
            result=int(value)
            return result
        except:
            try:
                result=float(value)
                if (rounding!=-1):
                    result=int(result*math.pow(10,rounding))/math.pow(10,rounding)
                return result
            except:
                result=(binascii.crc32(value.encode('utf8')) % (1<<32))
                return result

    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value=str(cell)
        if (value==''):
            raise ValueError("All cells in the target column need to contain a class label.")
        try:
            result=int(value)
            if (not str(result) in clean.classlist):
                clean.classlist=clean.classlist+[str(result)]
            return result
        except:
            try:
                result=float(value)
                if (rounding!=-1):
                    result=int(result*math.pow(10,rounding))/math.pow(10,rounding)
                if (not str(result) in clean.classlist):
                    clean.classlist=clean.classlist+[str(result)]
                return result
            except:
                result=(binascii.crc32(value.encode('utf8')) % (1<<32))
                if (result in clean.classlist):
                    result=clean.classlist.index(result)
                else:
                    clean.classlist=clean.classlist+[result]
                    result=clean.classlist.index(result)
                return result
    rowcount=0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f=open(outfile,"w+")
        if (headerless==False):
            next(reader,None)
        outbuf=[]
        for row in reader:
            rowcount=rowcount+1
            rowlen=num_attr
            if (not testfile):
                rowlen=rowlen+1    
            if (not len(row)==rowlen):
                raise ValueError("Column count must match trained predictor. Row "+str(rowcount)+" differs.")
            i=0
            for elem in row:
                if(i+1<len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid=str(convertclassid(elem))
                    outbuf.append(classid)
                i=i+1
            if (len(outbuf)<IOBUF):
                outbuf.append("\n")
            else:
                print(''.join(outbuf), file=f)
                outbuf=[]
        print(''.join(outbuf),end="", file=f)
        f.close()

        if (testfile==False and not len(clean.classlist)==2):
            raise ValueError("Number of classes must be 2.")


# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)

# Classifier
def classify(row):
    x=row
    h_0 = max((((-13.982959 * float(x[0]))+ (-14.15899 * float(x[1]))+ (-0.8722417 * float(x[2]))+ (-3.5172703 * float(x[3]))+ (0.29178822 * float(x[4]))+ (-0.94491094 * float(x[5]))+ (0.78354603 * float(x[6]))+ (0.92732555 * float(x[7]))+ (-0.23311697 * float(x[8]))+ (2.8552916 * float(x[9]))+ (0.05778984 * float(x[10]))+ (0.13608912 * float(x[11]))+ (0.85119325 * float(x[12]))+ (-0.85792786 * float(x[13]))+ (-0.8257414 * float(x[14]))+ (-0.9595632 * float(x[15]))+ (0.6652397 * float(x[16]))+ (0.5563135 * float(x[17]))+ (0.74002427 * float(x[18]))+ (0.9572367 * float(x[19]))+ (0.59831715 * float(x[20]))+ (-0.077041276 * float(x[21]))+ (0.56105834 * float(x[22]))+ (-0.76345116 * float(x[23]))+ (0.27984205 * float(x[24]))+ (-1.6196123 * float(x[25]))+ (0.88933784 * float(x[26]))+ (0.043696642 * float(x[27]))+ (-0.17067613 * float(x[28]))+ (-1.4768301 * float(x[29]))+ (0.5484674 * float(x[30]))+ (-0.08769934 * float(x[31]))+ (0.1368679 * float(x[32]))+ (-0.9624204 * float(x[33]))+ (0.23527099 * float(x[34]))+ (0.22419144 * float(x[35]))+ (0.23386799 * float(x[36]))+ (0.8874962 * float(x[37]))+ (0.3636406 * float(x[38]))+ (-0.7419977 * float(x[39]))+ (-0.1259361 * float(x[40]))+ (0.3952624 * float(x[41]))+ (-0.8795491 * float(x[42]))+ (0.33353344 * float(x[43]))+ (0.34127572 * float(x[44]))+ (-0.5792349 * float(x[45]))+ (-0.74214745 * float(x[46]))+ (-0.3691433 * float(x[47]))+ (-0.27257845 * float(x[48]))+ (0.14039354 * float(x[49])))+ ((-0.122796975 * float(x[50]))+ (0.9767477 * float(x[51]))+ (-0.79591036 * float(x[52]))+ (-0.5822465 * float(x[53]))+ (-0.677381 * float(x[54]))+ (0.30621666 * float(x[55]))+ (-0.4934168 * float(x[56]))+ (-0.067378454 * float(x[57]))+ (-0.15604211 * float(x[58]))+ (-0.68206084 * float(x[59]))+ (-1.4494544 * float(x[60]))+ (-0.43554115 * float(x[61]))+ (-0.7236341 * float(x[62]))+ (-0.6068353 * float(x[63]))+ (-0.26263085 * float(x[64]))+ (0.6419865 * float(x[65]))+ (-0.80579746 * float(x[66]))+ (0.6758898 * float(x[67]))+ (-0.8078032 * float(x[68]))+ (0.95291895 * float(x[69]))+ (-0.0626976 * float(x[70]))+ (0.9535222 * float(x[71]))+ (0.20969103 * float(x[72]))+ (0.47852716 * float(x[73]))+ (-0.9216244 * float(x[74]))+ (-0.43438607 * float(x[75]))+ (-0.7596069 * float(x[76]))+ (-0.4077196 * float(x[77]))+ (-0.7625446 * float(x[78]))+ (-0.36403364 * float(x[79]))+ (-0.17147401 * float(x[80]))+ (-0.871705 * float(x[81]))+ (0.38494423 * float(x[82]))+ (0.13320291 * float(x[83]))+ (-0.46922103 * float(x[84]))+ (0.04649611 * float(x[85]))+ (-0.812119 * float(x[86]))+ (0.15189297 * float(x[87]))+ (0.8585924 * float(x[88]))+ (-0.36286208 * float(x[89]))+ (-0.7445637 * float(x[90]))+ (-0.7364043 * float(x[91]))+ (0.4326544 * float(x[92]))+ (-0.42118782 * float(x[93]))+ (-0.1550687 * float(x[94]))+ (0.17302588 * float(x[95]))+ (-0.9597849 * float(x[96]))+ (0.65788007 * float(x[97]))+ (-0.99060905 * float(x[98]))+ (0.35563308 * float(x[99])))+ ((-0.45998406 * float(x[100]))+ (0.47038805 * float(x[101]))+ (0.9243771 * float(x[102]))+ (-0.50249374 * float(x[103]))+ (1.4582345 * float(x[104]))+ (0.18408386 * float(x[105]))+ (0.14450382 * float(x[106]))+ (-0.55383676 * float(x[107]))+ (0.905498 * float(x[108]))+ (-0.10574924 * float(x[109]))+ (0.69281733 * float(x[110]))+ (0.39895856 * float(x[111]))+ (-0.4051261 * float(x[112]))+ (0.9827018 * float(x[113]))+ (-0.20698851 * float(x[114]))+ (0.7622064 * float(x[115]))+ (0.16254574 * float(x[116]))+ (0.7634707 * float(x[117]))+ (0.38506317 * float(x[118]))+ (0.45050856 * float(x[119]))+ (0.0026487638 * float(x[120]))+ (0.91216725 * float(x[121]))+ (0.2879804 * float(x[122]))+ (-0.1522899 * float(x[123]))+ (0.21278642 * float(x[124]))+ (-0.9902617 * float(x[125]))+ (-0.39685038 * float(x[126]))+ (-0.3498576 * float(x[127]))+ (-0.41984478 * float(x[128]))+ (0.23603086 * float(x[129]))+ (-0.1424626 * float(x[130]))+ (-0.7290519 * float(x[131]))+ (-0.40343535 * float(x[132]))+ (0.13992982 * float(x[133]))+ (0.18174553 * float(x[134]))+ (0.1486505 * float(x[135]))+ (0.30640164 * float(x[136]))+ (-0.36599815 * float(x[137]))+ (-0.13716313 * float(x[138]))+ (0.7930932 * float(x[139]))+ (-0.26487625 * float(x[140]))+ (-0.12827015 * float(x[141]))+ (0.78384674 * float(x[142]))+ (0.61238796 * float(x[143]))+ (0.40777716 * float(x[144]))+ (-1.5070847 * float(x[145]))+ (0.83896524 * float(x[146]))+ (0.4284826 * float(x[147]))+ (0.997694 * float(x[148]))+ (-0.7011034 * float(x[149])))+ ((-0.17006674 * float(x[150]))+ (-0.67501414 * float(x[151]))+ (0.23111913 * float(x[152]))+ (-0.75236005 * float(x[153]))+ (0.69601643 * float(x[154]))+ (0.9828455 * float(x[155]))+ (0.13812028 * float(x[156]))+ (-0.1856334 * float(x[157]))+ (-0.861666 * float(x[158]))+ (-0.59446853 * float(x[159]))+ (-0.09291463 * float(x[160]))+ (0.4441112 * float(x[161]))+ (-0.015435688 * float(x[162]))+ (0.951043 * float(x[163]))+ (0.6829586 * float(x[164]))+ (-1.3721169 * float(x[165]))+ (-0.28004387 * float(x[166]))+ (2.7318227 * float(x[167]))+ (-0.17819184 * float(x[168]))+ (0.042073213 * float(x[169]))+ (-0.89132404 * float(x[170]))+ (-0.60000694 * float(x[171]))+ (-0.9629564 * float(x[172]))+ (-0.119615026 * float(x[173]))+ (-0.5521506 * float(x[174]))+ (0.99639755 * float(x[175]))+ (0.8561626 * float(x[176]))+ (0.4088288 * float(x[177]))+ (-0.93632215 * float(x[178]))+ (-0.6706117 * float(x[179]))+ (0.27444458 * float(x[180]))+ (0.15445718 * float(x[181]))+ (-0.5242144 * float(x[182]))+ (0.868428 * float(x[183]))+ (0.22793192 * float(x[184]))+ (0.4119243 * float(x[185]))+ (0.5480277 * float(x[186]))+ (-1.3463596 * float(x[187]))+ (-0.37611002 * float(x[188]))+ (0.16464996 * float(x[189]))+ (-0.5803125 * float(x[190]))+ (-0.62761396 * float(x[191]))+ (0.16189785 * float(x[192]))+ (0.4791016 * float(x[193]))+ (-0.019082382 * float(x[194]))+ (-0.5451707 * float(x[195]))+ (-1.5706714 * float(x[196]))+ (-0.88394165 * float(x[197]))+ (-0.13116676 * float(x[198]))+ (-0.37640825 * float(x[199])))+ ((0.39268696 * float(x[200]))+ (-0.24449632 * float(x[201]))+ (-0.64079267 * float(x[202]))+ (-0.9506425 * float(x[203]))+ (-0.86550075 * float(x[204]))+ (0.35878554 * float(x[205]))+ (-0.09260631 * float(x[206]))+ (0.07315842 * float(x[207]))+ (0.7933426 * float(x[208]))+ (0.9806779 * float(x[209]))+ (-0.56620604 * float(x[210]))+ (0.3261564 * float(x[211]))+ (-0.47335523 * float(x[212]))+ (-0.958698 * float(x[213]))+ (0.5167573 * float(x[214]))+ (-0.3599657 * float(x[215]))+ (-0.2330722 * float(x[216]))+ (0.17663422 * float(x[217]))+ (0.6620969 * float(x[218]))+ (0.22931561 * float(x[219]))+ (0.7453013 * float(x[220]))+ (-0.45291594 * float(x[221]))+ (0.59609365 * float(x[222]))+ (-0.6287281 * float(x[223]))+ (0.9055833 * float(x[224]))+ (0.37497655 * float(x[225]))+ (-0.5689846 * float(x[226]))+ (0.8947412 * float(x[227]))+ (0.46171162 * float(x[228]))+ (-0.49211672 * float(x[229]))+ (-0.57337606 * float(x[230]))+ (1.9214182 * float(x[231]))+ (-1.6188792 * float(x[232]))+ (-0.5850598 * float(x[233]))+ (-0.15062906 * float(x[234]))+ (2.4311981 * float(x[235]))+ (-0.072849154 * float(x[236]))+ (-0.44474736 * float(x[237]))+ (0.1735687 * float(x[238]))+ (0.7277112 * float(x[239]))+ (-0.76493627 * float(x[240]))+ (0.034758214 * float(x[241]))+ (-0.7358638 * float(x[242]))+ (0.32751185 * float(x[243]))+ (-1.027966 * float(x[244]))+ (0.13084263 * float(x[245]))+ (-0.6334403 * float(x[246]))+ (-0.7103045 * float(x[247]))+ (-0.023887439 * float(x[248]))+ (-0.28877452 * float(x[249])))+ ((0.8808639 * float(x[250]))+ (0.5306505 * float(x[251]))+ (0.49732724 * float(x[252]))+ (0.3804066 * float(x[253]))+ (-0.83315516 * float(x[254]))+ (0.10438494 * float(x[255]))+ (0.16895214 * float(x[256]))+ (0.92387277 * float(x[257]))+ (-0.41570494 * float(x[258]))+ (-1.3384278 * float(x[259]))+ (-0.79941213 * float(x[260]))+ (-0.96714073 * float(x[261]))+ (0.8590586 * float(x[262]))+ (0.33983308 * float(x[263]))+ (0.5703058 * float(x[264]))+ (-1.4258659 * float(x[265]))+ (0.51347905 * float(x[266]))+ (-0.5038819 * float(x[267]))+ (0.3394635 * float(x[268]))+ (0.95499027 * float(x[269]))+ (0.7530105 * float(x[270]))+ (-0.3236821 * float(x[271]))+ (0.9230591 * float(x[272]))+ (-0.96362966 * float(x[273]))+ (0.17179035 * float(x[274]))+ (0.8827554 * float(x[275]))+ (-0.22168021 * float(x[276]))+ (0.26089588 * float(x[277]))+ (0.7485759 * float(x[278]))+ (-1.1621598 * float(x[279]))+ (0.6978871 * float(x[280]))+ (0.23575336 * float(x[281]))+ (-0.9735263 * float(x[282]))+ (-0.30553296 * float(x[283]))+ (2.567929 * float(x[284]))+ (0.96365875 * float(x[285]))+ (-0.043259386 * float(x[286]))+ (-0.005217269 * float(x[287]))+ (0.27894503 * float(x[288]))+ (-0.2628308 * float(x[289]))+ (-0.72619945 * float(x[290]))+ (-0.2953464 * float(x[291]))+ (-0.62030417 * float(x[292]))+ (0.022637965 * float(x[293]))+ (-0.551366 * float(x[294]))+ (-0.80431104 * float(x[295]))+ (1.2029341 * float(x[296]))+ (0.945839 * float(x[297]))+ (0.9216693 * float(x[298]))+ (0.813111 * float(x[299])))+ ((0.5480947 * float(x[300]))+ (-0.3337097 * float(x[301]))+ (-0.8377972 * float(x[302]))+ (-0.18551765 * float(x[303]))+ (-0.5355317 * float(x[304]))+ (-0.73502475 * float(x[305]))+ (-0.8931456 * float(x[306]))+ (0.45118874 * float(x[307]))+ (-0.9771451 * float(x[308]))+ (0.5411615 * float(x[309]))+ (-0.7061067 * float(x[310]))+ (-0.84095585 * float(x[311]))+ (-0.8207939 * float(x[312]))+ (0.34409562 * float(x[313]))+ (-0.5092656 * float(x[314]))+ (-0.15892106 * float(x[315]))+ (0.114737585 * float(x[316]))+ (2.0914016 * float(x[317]))+ (0.45408854 * float(x[318]))+ (-0.45934418 * float(x[319]))+ (-0.7370344 * float(x[320]))+ (-0.88925135 * float(x[321]))+ (-0.39680272 * float(x[322]))+ (-0.4757637 * float(x[323]))+ (-0.08771887 * float(x[324]))+ (0.36656266 * float(x[325]))+ (0.39125088 * float(x[326]))+ (-0.4329623 * float(x[327]))+ (-0.24014609 * float(x[328]))+ (-0.63769805 * float(x[329]))+ (0.57709104 * float(x[330]))+ (-0.88630384 * float(x[331]))+ (0.39399448 * float(x[332]))+ (0.5573908 * float(x[333]))+ (0.5548151 * float(x[334]))+ (-0.48115486 * float(x[335]))+ (-0.25237373 * float(x[336]))+ (0.17519927 * float(x[337]))+ (-0.4543562 * float(x[338]))+ (-0.2582944 * float(x[339]))+ (-0.60589147 * float(x[340]))+ (-0.08028823 * float(x[341]))+ (-0.9107754 * float(x[342]))+ (0.5995918 * float(x[343]))+ (-0.8460871 * float(x[344]))+ (0.0376703 * float(x[345]))+ (-0.031273104 * float(x[346]))+ (0.15508589 * float(x[347]))+ (0.92299145 * float(x[348]))+ (0.2911405 * float(x[349])))+ ((-0.92927516 * float(x[350]))+ (5.2117267 * float(x[351]))+ (0.020033704 * float(x[352]))+ (0.07235499 * float(x[353]))+ (0.362785 * float(x[354]))+ (-0.4448078 * float(x[355]))+ (-0.7422789 * float(x[356]))+ (-0.21464865 * float(x[357]))+ (0.91281146 * float(x[358]))+ (-0.6257382 * float(x[359]))+ (0.8079679 * float(x[360]))+ (0.0876119 * float(x[361]))+ (-0.086177155 * float(x[362]))+ (0.76408285 * float(x[363]))+ (-0.08279207 * float(x[364]))+ (0.44833526 * float(x[365]))+ (-0.20194936 * float(x[366]))+ (0.8080888 * float(x[367]))+ (0.38005003 * float(x[368]))+ (0.3992441 * float(x[369]))+ (-0.0039004944 * float(x[370]))+ (0.5135573 * float(x[371]))+ (0.2721221 * float(x[372]))+ (-0.51995945 * float(x[373]))+ (-0.67892236 * float(x[374]))+ (0.16575006 * float(x[375]))+ (0.91833323 * float(x[376]))+ (-0.083722346 * float(x[377]))+ (0.18196833 * float(x[378]))+ (0.7154453 * float(x[379]))+ (-0.085553095 * float(x[380]))+ (0.9037489 * float(x[381]))+ (0.15150233 * float(x[382]))+ (0.64153427 * float(x[383]))+ (0.81768745 * float(x[384]))+ (0.63104767 * float(x[385]))+ (-0.32606485 * float(x[386]))+ (0.25779688 * float(x[387]))+ (0.13752721 * float(x[388]))+ (-0.8745741 * float(x[389]))+ (-0.1519355 * float(x[390]))+ (-0.48263186 * float(x[391]))+ (0.6980766 * float(x[392]))+ (-0.93339074 * float(x[393]))+ (0.49093255 * float(x[394]))+ (-0.2892623 * float(x[395]))+ (-1.2261682 * float(x[396]))+ (-0.967343 * float(x[397]))+ (-0.26132706 * float(x[398]))+ (-0.19748099 * float(x[399])))+ ((0.85858285 * float(x[400]))+ (-1.4709748 * float(x[401]))+ (0.89060307 * float(x[402]))+ (0.7389771 * float(x[403]))+ (-0.35015905 * float(x[404]))+ (-0.34659824 * float(x[405]))+ (-0.53451174 * float(x[406]))+ (0.22884822 * float(x[407]))+ (-0.9338508 * float(x[408]))+ (-0.96878785 * float(x[409]))+ (-0.81261325 * float(x[410]))+ (-0.86385185 * float(x[411]))+ (-0.496118 * float(x[412]))+ (-0.55767816 * float(x[413]))+ (-0.49361762 * float(x[414]))+ (-0.7378895 * float(x[415]))+ (-0.97592753 * float(x[416]))+ (-0.7690314 * float(x[417]))+ (0.23696052 * float(x[418]))+ (0.94851243 * float(x[419]))+ (2.929568 * float(x[420]))+ (-0.18189181 * float(x[421]))+ (-0.67409116 * float(x[422]))+ (0.27752352 * float(x[423]))+ (-0.019389307 * float(x[424]))+ (0.97881955 * float(x[425]))+ (0.4363024 * float(x[426]))+ (0.93467647 * float(x[427]))+ (-0.423203 * float(x[428]))+ (-0.517244 * float(x[429]))+ (0.69321674 * float(x[430]))+ (-0.50787365 * float(x[431]))+ (0.69992584 * float(x[432]))+ (0.034617033 * float(x[433]))+ (-0.15182203 * float(x[434]))+ (0.10937562 * float(x[435]))+ (-1.0961016 * float(x[436]))+ (0.41314942 * float(x[437]))+ (-0.17028627 * float(x[438]))+ (-0.27890888 * float(x[439]))+ (1.0255214 * float(x[440]))+ (0.42290094 * float(x[441]))+ (-0.9079854 * float(x[442]))+ (-0.534746 * float(x[443]))+ (-0.30296126 * float(x[444]))+ (0.62993294 * float(x[445]))+ (0.97098285 * float(x[446]))+ (0.9379434 * float(x[447]))+ (0.8098967 * float(x[448]))+ (-0.40688747 * float(x[449])))+ ((0.9840225 * float(x[450]))+ (-0.5011599 * float(x[451]))+ (-0.7881877 * float(x[452]))+ (0.90190524 * float(x[453]))+ (-0.5331595 * float(x[454]))+ (0.37945533 * float(x[455]))+ (-0.8832873 * float(x[456]))+ (0.8296258 * float(x[457]))+ (0.76344043 * float(x[458]))+ (-0.4551262 * float(x[459]))+ (-0.24188621 * float(x[460]))+ (-0.25140762 * float(x[461]))+ (0.4975765 * float(x[462]))+ (-0.5243855 * float(x[463]))+ (-0.6562938 * float(x[464]))+ (-0.1014167 * float(x[465]))+ (-0.39106318 * float(x[466]))+ (0.6783782 * float(x[467]))+ (-0.52451634 * float(x[468]))+ (-0.74342144 * float(x[469]))+ (0.8851672 * float(x[470]))+ (0.2679954 * float(x[471]))+ (0.7345788 * float(x[472]))+ (0.8804194 * float(x[473]))+ (-0.50441164 * float(x[474]))+ (0.39915013 * float(x[475]))+ (0.93593115 * float(x[476]))+ (0.9888016 * float(x[477]))+ (0.7044832 * float(x[478]))+ (-0.85826045 * float(x[479]))+ (-0.41441193 * float(x[480]))+ (-0.69529057 * float(x[481]))+ (-0.16502725 * float(x[482]))+ (-0.7332966 * float(x[483]))+ (0.2082356 * float(x[484]))+ (-0.23438388 * float(x[485]))+ (-0.029313616 * float(x[486]))+ (0.9355894 * float(x[487]))+ (-0.8955563 * float(x[488]))+ (-0.45035285 * float(x[489]))+ (0.18446083 * float(x[490]))+ (0.123317644 * float(x[491]))+ (-0.1865333 * float(x[492]))+ (0.104156554 * float(x[493]))+ (-0.45669445 * float(x[494]))+ (-0.0891117 * float(x[495]))+ (-0.19657293 * float(x[496]))+ (-0.49904788 * float(x[497]))+ (0.011732767 * float(x[498]))+ (-0.37923834 * float(x[499])))+ ((-0.25393027 * float(x[500]))+ (0.049940884 * float(x[501]))+ (0.50119007 * float(x[502]))+ (-0.33298507 * float(x[503]))+ (0.8483175 * float(x[504]))+ (0.7246371 * float(x[505]))+ (-0.9026194 * float(x[506]))+ (-0.49271494 * float(x[507]))+ (1.1979616 * float(x[508]))+ (-0.79074425 * float(x[509]))+ (-0.9732527 * float(x[510]))+ (0.48019505 * float(x[511]))+ (0.36102897 * float(x[512]))+ (0.24476886 * float(x[513]))+ (0.4210568 * float(x[514]))+ (-0.5901526 * float(x[515]))+ (-0.31660378 * float(x[516]))+ (0.35248497 * float(x[517]))+ (0.7584695 * float(x[518]))+ (0.087356105 * float(x[519]))+ (-0.42505094 * float(x[520]))+ (-0.9395295 * float(x[521]))+ (0.42067367 * float(x[522]))+ (-0.98423177 * float(x[523]))+ (-0.25464186 * float(x[524]))+ (1.1863556 * float(x[525]))+ (0.8442229 * float(x[526]))+ (-0.8210109 * float(x[527]))+ (0.18009244 * float(x[528]))+ (-0.9513736 * float(x[529]))+ (-0.31477803 * float(x[530]))+ (0.24446212 * float(x[531]))+ (-0.4418641 * float(x[532]))+ (-0.5805001 * float(x[533]))+ (-0.76859355 * float(x[534]))+ (0.15428048 * float(x[535]))+ (0.39054 * float(x[536]))+ (0.822461 * float(x[537]))+ (0.89772207 * float(x[538]))+ (-0.99459356 * float(x[539]))+ (0.2943933 * float(x[540]))+ (0.20078447 * float(x[541]))+ (0.17747922 * float(x[542]))+ (0.9255406 * float(x[543]))+ (-0.9662567 * float(x[544]))+ (-0.5786233 * float(x[545]))+ (0.6273573 * float(x[546]))+ (-0.6505903 * float(x[547]))+ (-1.6121705 * float(x[548]))+ (0.5816803 * float(x[549])))+ ((-0.80551416 * float(x[550]))+ (-0.115928724 * float(x[551]))+ (0.03990475 * float(x[552]))+ (0.3879128 * float(x[553]))+ (-0.81822854 * float(x[554]))+ (-0.544481 * float(x[555]))+ (-0.17939687 * float(x[556]))+ (-0.74273676 * float(x[557]))+ (0.77392155 * float(x[558]))+ (0.23765233 * float(x[559]))+ (-0.73307705 * float(x[560]))+ (0.96116024 * float(x[561]))+ (0.74357146 * float(x[562]))+ (0.005441522 * float(x[563]))+ (0.844696 * float(x[564]))+ (0.082761586 * float(x[565]))+ (0.8465309 * float(x[566]))+ (0.65979475 * float(x[567]))+ (0.93657285 * float(x[568]))+ (0.83956563 * float(x[569]))+ (-0.9279324 * float(x[570]))+ (-0.650456 * float(x[571]))+ (-0.22173065 * float(x[572]))+ (-0.6021319 * float(x[573]))+ (-0.39994216 * float(x[574]))+ (-0.6790647 * float(x[575]))+ (0.77260935 * float(x[576]))+ (-0.10721117 * float(x[577]))+ (0.8157512 * float(x[578]))+ (-0.6795391 * float(x[579]))+ (-0.58408386 * float(x[580]))+ (-0.86767286 * float(x[581]))+ (-0.8471124 * float(x[582]))+ (0.39292628 * float(x[583]))+ (-0.5052025 * float(x[584]))+ (-0.920769 * float(x[585]))+ (-0.8801114 * float(x[586]))+ (-0.8778429 * float(x[587]))+ (0.8195907 * float(x[588]))+ (0.47976783 * float(x[589]))+ (0.7961247 * float(x[590]))+ (0.34516463 * float(x[591]))+ (0.057879858 * float(x[592]))+ (-0.3911073 * float(x[593]))+ (0.99592453 * float(x[594]))+ (-1.0957073 * float(x[595]))+ (-0.0587021 * float(x[596]))+ (-0.24350965 * float(x[597]))+ (0.9590539 * float(x[598]))+ (-0.64655846 * float(x[599])))+ ((-0.344024 * float(x[600]))+ (0.36069733 * float(x[601]))+ (-0.87358475 * float(x[602]))+ (0.21449874 * float(x[603]))+ (-0.044706993 * float(x[604]))+ (-0.43200004 * float(x[605]))+ (-0.52317345 * float(x[606]))+ (0.029025486 * float(x[607]))+ (-0.26414484 * float(x[608]))+ (-0.08696022 * float(x[609]))+ (-0.32504523 * float(x[610]))+ (0.9409874 * float(x[611]))+ (-0.73312116 * float(x[612]))+ (-0.8063921 * float(x[613]))+ (-0.31321654 * float(x[614]))+ (0.1820538 * float(x[615]))+ (0.31835294 * float(x[616]))+ (-0.2054865 * float(x[617]))+ (0.99855596 * float(x[618]))+ (-0.296214 * float(x[619]))+ (0.44281334 * float(x[620]))+ (0.27516538 * float(x[621]))+ (0.62610775 * float(x[622]))+ (0.95245135 * float(x[623]))+ (0.7061443 * float(x[624]))+ (0.52912396 * float(x[625]))+ (0.39649695 * float(x[626]))+ (-0.32900366 * float(x[627]))+ (-0.7046288 * float(x[628]))+ (-0.87472796 * float(x[629]))+ (-0.5161966 * float(x[630]))+ (-0.13543704 * float(x[631]))+ (0.043992545 * float(x[632]))+ (0.54616714 * float(x[633]))+ (0.91748184 * float(x[634]))+ (-0.76535904 * float(x[635]))+ (-0.7859917 * float(x[636]))+ (0.17938945 * float(x[637]))+ (1.213008 * float(x[638]))+ (0.69630075 * float(x[639]))+ (0.87166417 * float(x[640]))+ (0.29664782 * float(x[641]))+ (-0.20039661 * float(x[642]))+ (-0.23932964 * float(x[643]))+ (-0.70438266 * float(x[644]))+ (0.36986887 * float(x[645]))+ (0.31352392 * float(x[646]))+ (0.65068215 * float(x[647]))+ (-0.805484 * float(x[648]))+ (-0.0044461843 * float(x[649])))+ ((0.16216385 * float(x[650]))+ (-0.51688594 * float(x[651]))+ (-0.6619492 * float(x[652]))+ (0.7191617 * float(x[653]))+ (-0.88293016 * float(x[654]))+ (-0.05875819 * float(x[655]))+ (-0.768332 * float(x[656]))+ (-0.08588248 * float(x[657]))+ (2.2656248 * float(x[658]))+ (-1.1419134 * float(x[659]))+ (0.71424985 * float(x[660]))+ (-0.7653689 * float(x[661]))+ (-0.45749584 * float(x[662]))+ (-0.19241452 * float(x[663]))+ (-0.20037572 * float(x[664]))+ (0.34276697 * float(x[665]))+ (-0.31056374 * float(x[666]))+ (-0.3206666 * float(x[667]))+ (0.2783738 * float(x[668]))+ (-0.20167771 * float(x[669]))+ (-0.13647975 * float(x[670]))+ (0.2290554 * float(x[671]))+ (-0.8599156 * float(x[672]))+ (0.6448135 * float(x[673]))+ (0.30684233 * float(x[674]))+ (0.45268494 * float(x[675]))+ (0.073846005 * float(x[676]))+ (-0.77904576 * float(x[677]))+ (-0.18992877 * float(x[678]))+ (-0.18925284 * float(x[679]))+ (-0.35791403 * float(x[680]))+ (-0.94009936 * float(x[681]))+ (0.4745085 * float(x[682]))+ (-0.7804311 * float(x[683]))+ (0.21261626 * float(x[684]))+ (0.40643498 * float(x[685]))+ (0.26957265 * float(x[686]))+ (-0.021297382 * float(x[687]))+ (-0.7934037 * float(x[688]))+ (0.7343343 * float(x[689]))+ (-0.9416195 * float(x[690]))+ (0.06983371 * float(x[691]))+ (-0.9397131 * float(x[692]))+ (0.04836772 * float(x[693]))+ (-0.26980025 * float(x[694]))+ (-0.61886615 * float(x[695]))+ (-0.9618354 * float(x[696]))+ (0.036299627 * float(x[697]))+ (0.6855537 * float(x[698]))+ (-0.25356808 * float(x[699])))+ ((-0.55427235 * float(x[700]))+ (-0.838936 * float(x[701]))+ (-0.8293781 * float(x[702]))+ (-0.18899931 * float(x[703]))+ (-0.7999719 * float(x[704]))+ (0.432016 * float(x[705]))+ (-0.86770105 * float(x[706]))+ (-0.86879027 * float(x[707]))+ (0.7125523 * float(x[708]))+ (-0.6757595 * float(x[709]))+ (-0.55083984 * float(x[710]))+ (0.54691106 * float(x[711]))+ (-0.08718087 * float(x[712]))+ (-0.68913746 * float(x[713]))+ (-0.6008077 * float(x[714]))+ (-0.1340316 * float(x[715]))+ (0.056468178 * float(x[716]))+ (-0.30111942 * float(x[717]))+ (0.5629592 * float(x[718]))+ (0.5020433 * float(x[719]))+ (0.85442364 * float(x[720]))+ (-0.9420949 * float(x[721]))+ (0.7913826 * float(x[722]))+ (-0.21486242 * float(x[723]))+ (0.756745 * float(x[724]))+ (0.38156956 * float(x[725]))+ (0.97469753 * float(x[726]))+ (0.5185649 * float(x[727]))+ (-0.27091074 * float(x[728]))+ (0.0021263456 * float(x[729]))+ (-0.2472217 * float(x[730]))+ (-0.940381 * float(x[731]))+ (-0.478191 * float(x[732]))+ (-0.008059409 * float(x[733]))+ (0.36347988 * float(x[734]))+ (-0.44531944 * float(x[735]))+ (0.04875962 * float(x[736]))+ (-1.5134398 * float(x[737]))+ (-0.6803094 * float(x[738]))+ (-0.90638727 * float(x[739]))+ (0.0018809994 * float(x[740]))+ (-0.9922793 * float(x[741]))+ (-0.6428401 * float(x[742]))+ (0.2257335 * float(x[743]))+ (-0.8372608 * float(x[744]))+ (0.763793 * float(x[745]))+ (0.4392403 * float(x[746]))+ (0.93277997 * float(x[747]))+ (0.015271095 * float(x[748]))+ (-0.39927384 * float(x[749])))+ ((0.57754916 * float(x[750]))+ (0.8616374 * float(x[751]))+ (0.041522875 * float(x[752]))+ (-0.46558595 * float(x[753]))+ (0.006597238 * float(x[754]))+ (-0.2561625 * float(x[755]))+ (-0.9972333 * float(x[756]))+ (-0.50462997 * float(x[757]))+ (-0.363533 * float(x[758]))+ (0.7175549 * float(x[759]))+ (-0.082993664 * float(x[760]))+ (-0.11082543 * float(x[761]))+ (-0.32779548 * float(x[762]))+ (0.76135623 * float(x[763]))+ (0.8166105 * float(x[764]))+ (-0.09560377 * float(x[765]))+ (-0.24651746 * float(x[766]))+ (0.9322949 * float(x[767]))+ (-0.08644553 * float(x[768]))+ (0.3513783 * float(x[769]))+ (-0.51022106 * float(x[770]))+ (-0.5670855 * float(x[771]))+ (-0.6679044 * float(x[772]))+ (0.8455132 * float(x[773]))+ (-0.41184667 * float(x[774]))+ (-0.09381151 * float(x[775]))+ (-0.012084332 * float(x[776]))+ (0.5563432 * float(x[777]))+ (0.68846995 * float(x[778]))+ (-0.7218546 * float(x[779]))+ (-0.14619128 * float(x[780]))+ (0.6857098 * float(x[781]))+ (0.6360666 * float(x[782]))+ (-0.7951725 * float(x[783]))+ (-0.6872333 * float(x[784]))+ (-0.3916026 * float(x[785]))+ (-0.84928185 * float(x[786]))+ (-0.150674 * float(x[787]))+ (-0.7847646 * float(x[788]))+ (0.13643518 * float(x[789]))+ (-1.446468 * float(x[790]))+ (0.19286613 * float(x[791]))+ (-0.7649487 * float(x[792]))+ (0.24475731 * float(x[793]))+ (0.86512244 * float(x[794]))+ (-0.21640612 * float(x[795]))+ (-0.5156428 * float(x[796]))+ (-0.49920356 * float(x[797]))+ (0.8687275 * float(x[798]))+ (-0.9200144 * float(x[799])))+ ((-0.7099159 * float(x[800]))+ (-0.18339476 * float(x[801]))+ (-0.24518685 * float(x[802]))+ (0.61872935 * float(x[803]))+ (0.4180709 * float(x[804]))+ (0.9086676 * float(x[805]))+ (-0.29612753 * float(x[806]))+ (0.79508555 * float(x[807]))+ (0.5399344 * float(x[808]))+ (-0.28515127 * float(x[809]))+ (0.24333087 * float(x[810]))+ (-1.362442 * float(x[811]))+ (1.1170077 * float(x[812]))+ (-0.77514535 * float(x[813]))+ (-0.5751313 * float(x[814]))+ (-0.6339334 * float(x[815]))+ (-0.193948 * float(x[816]))+ (0.4904659 * float(x[817]))+ (0.0538149 * float(x[818]))+ (-0.024647353 * float(x[819]))+ (-0.99890804 * float(x[820]))+ (-0.14919655 * float(x[821]))+ (-0.87289244 * float(x[822]))+ (-0.5834935 * float(x[823]))+ (0.8647879 * float(x[824]))+ (-0.5692036 * float(x[825]))+ (0.7166753 * float(x[826]))+ (0.60578674 * float(x[827]))+ (-0.6817075 * float(x[828]))+ (0.21142392 * float(x[829]))+ (-0.7686763 * float(x[830]))+ (-0.45054254 * float(x[831]))+ (0.27492455 * float(x[832]))+ (0.6238771 * float(x[833]))+ (-0.041230902 * float(x[834]))+ (0.82972616 * float(x[835]))+ (-0.9013021 * float(x[836]))+ (-0.41422287 * float(x[837]))+ (0.4301052 * float(x[838]))+ (-0.16378158 * float(x[839]))+ (-0.6540973 * float(x[840]))+ (-0.7855785 * float(x[841]))+ (0.63467824 * float(x[842]))+ (-0.053714044 * float(x[843]))+ (0.7645673 * float(x[844]))+ (0.46657827 * float(x[845]))+ (-0.1805476 * float(x[846]))+ (-0.25297797 * float(x[847]))+ (0.03127669 * float(x[848]))+ (1.5789598 * float(x[849])))+ ((0.47455716 * float(x[850]))+ (-0.98969406 * float(x[851]))+ (0.3883157 * float(x[852]))+ (0.8390148 * float(x[853]))+ (0.42091152 * float(x[854]))+ (-0.64598846 * float(x[855]))+ (-0.032963745 * float(x[856]))+ (-0.719368 * float(x[857]))+ (-0.28200945 * float(x[858]))+ (0.8742341 * float(x[859]))+ (0.8466106 * float(x[860]))+ (-0.4343263 * float(x[861]))+ (-0.3207379 * float(x[862]))+ (0.5686333 * float(x[863]))+ (0.9263946 * float(x[864]))+ (-0.7043973 * float(x[865]))+ (-0.48616672 * float(x[866]))+ (0.74711365 * float(x[867]))+ (-0.016215537 * float(x[868]))+ (-0.0221632 * float(x[869]))+ (-0.6289642 * float(x[870]))+ (0.06533717 * float(x[871]))+ (-0.34746075 * float(x[872]))+ (-0.36691487 * float(x[873]))+ (0.6945938 * float(x[874]))+ (-0.1338451 * float(x[875]))+ (-0.28530625 * float(x[876]))+ (0.15973687 * float(x[877]))+ (0.46348837 * float(x[878]))+ (0.45509398 * float(x[879]))+ (-0.49361616 * float(x[880]))+ (0.15541884 * float(x[881]))+ (0.55835885 * float(x[882]))+ (0.59118074 * float(x[883]))+ (-1.3002652 * float(x[884]))+ (0.5417455 * float(x[885]))+ (-0.5175383 * float(x[886]))+ (-0.716987 * float(x[887]))+ (0.73188615 * float(x[888]))+ (-0.11735706 * float(x[889]))+ (-0.027179101 * float(x[890]))+ (-0.10326164 * float(x[891]))+ (-0.77062684 * float(x[892]))+ (0.2423385 * float(x[893]))+ (-0.6738455 * float(x[894]))+ (0.7335771 * float(x[895]))+ (0.2554695 * float(x[896]))+ (-0.1971441 * float(x[897]))+ (-1.0729353 * float(x[898]))+ (0.6216772 * float(x[899])))+ ((-0.3036161 * float(x[900]))+ (-0.5770904 * float(x[901]))+ (-0.88123363 * float(x[902]))+ (0.08184902 * float(x[903]))+ (0.8370929 * float(x[904]))+ (0.14217812 * float(x[905]))+ (-0.3310525 * float(x[906]))+ (-0.6492559 * float(x[907]))+ (-0.7682031 * float(x[908]))+ (0.79973346 * float(x[909]))+ (-0.8862455 * float(x[910]))+ (0.96097136 * float(x[911]))+ (-0.80709827 * float(x[912]))+ (0.7269413 * float(x[913]))+ (0.13301222 * float(x[914]))+ (-1.3435495 * float(x[915]))+ (-0.31531525 * float(x[916]))+ (-0.7653578 * float(x[917]))+ (-0.37085342 * float(x[918]))+ (0.31463784 * float(x[919]))+ (0.034652166 * float(x[920]))+ (-0.03006871 * float(x[921]))+ (0.80232435 * float(x[922]))+ (3.3809345 * float(x[923]))+ (0.6537232 * float(x[924]))+ (0.45114708 * float(x[925]))+ (-0.92288554 * float(x[926]))+ (0.9144277 * float(x[927]))+ (-0.5662595 * float(x[928]))+ (0.80629927 * float(x[929]))+ (-0.9141516 * float(x[930]))+ (-0.33385593 * float(x[931]))+ (-0.8005341 * float(x[932]))+ (-0.048821766 * float(x[933]))+ (0.64004487 * float(x[934]))+ (-0.40362528 * float(x[935]))+ (-0.6981302 * float(x[936]))+ (-0.33946592 * float(x[937]))+ (0.6277603 * float(x[938]))+ (-0.7192321 * float(x[939]))+ (-0.5452751 * float(x[940]))+ (-0.86229604 * float(x[941]))+ (0.41142008 * float(x[942]))+ (-0.20953351 * float(x[943]))+ (-0.37832004 * float(x[944]))+ (0.4372528 * float(x[945]))+ (-0.32804492 * float(x[946]))+ (0.13265337 * float(x[947]))+ (0.9710575 * float(x[948]))+ (-0.5647555 * float(x[949])))+ ((0.127552 * float(x[950]))+ (-0.6752841 * float(x[951]))+ (-0.41831818 * float(x[952]))+ (-0.6404094 * float(x[953]))+ (-0.3089887 * float(x[954]))+ (-0.039878223 * float(x[955]))+ (0.044351738 * float(x[956]))+ (-0.1128733 * float(x[957]))+ (0.7788958 * float(x[958]))+ (-0.5597923 * float(x[959]))+ (0.24578807 * float(x[960]))+ (-0.7770079 * float(x[961]))+ (-0.08206028 * float(x[962]))+ (-0.3553329 * float(x[963]))+ (-0.36699852 * float(x[964]))+ (-0.034831516 * float(x[965]))+ (0.45965528 * float(x[966]))+ (-0.8616347 * float(x[967]))+ (1.4295748 * float(x[968]))+ (0.8102862 * float(x[969]))+ (-0.6470012 * float(x[970]))+ (0.8783218 * float(x[971]))+ (0.012624448 * float(x[972]))+ (0.99961716 * float(x[973]))+ (-0.605481 * float(x[974]))+ (0.069816396 * float(x[975]))+ (-0.41950393 * float(x[976]))+ (-0.39165288 * float(x[977]))+ (0.18213077 * float(x[978]))+ (0.84343815 * float(x[979]))+ (0.6105277 * float(x[980]))+ (-0.39981747 * float(x[981]))+ (0.11834756 * float(x[982]))+ (1.7112924 * float(x[983]))+ (-0.015277186 * float(x[984]))+ (0.74766433 * float(x[985]))+ (0.66796327 * float(x[986]))+ (-0.5723293 * float(x[987]))+ (0.5424509 * float(x[988]))+ (-0.9756577 * float(x[989]))+ (-0.3543409 * float(x[990]))+ (-0.5408651 * float(x[991]))+ (-0.839348 * float(x[992]))+ (0.47370633 * float(x[993]))+ (-0.80464727 * float(x[994]))+ (0.029844403 * float(x[995]))+ (0.876824 * float(x[996]))+ (-0.5427069 * float(x[997]))+ (-0.53410316 * float(x[998]))+ (0.18576051 * float(x[999])))+ ((-0.9798726 * float(x[1000]))+ (-0.048347607 * float(x[1001]))+ (0.4175408 * float(x[1002]))+ (-0.9120491 * float(x[1003]))+ (0.759043 * float(x[1004]))+ (0.040162828 * float(x[1005]))+ (-0.9386779 * float(x[1006]))+ (-0.21051407 * float(x[1007]))+ (1.7081914 * float(x[1008]))+ (0.16463947 * float(x[1009]))+ (-0.42994863 * float(x[1010]))+ (-1.0951157 * float(x[1011]))+ (-0.08659275 * float(x[1012]))+ (-0.95809984 * float(x[1013]))+ (-0.17676897 * float(x[1014]))+ (-0.9926709 * float(x[1015]))+ (-0.51264423 * float(x[1016]))+ (0.177278 * float(x[1017]))+ (-0.46510792 * float(x[1018]))+ (-0.5283316 * float(x[1019]))+ (0.2409998 * float(x[1020]))+ (0.27924448 * float(x[1021]))+ (1.7679006 * float(x[1022]))+ (0.55655235 * float(x[1023]))+ (1.563386 * float(x[1024]))+ (-0.019160183 * float(x[1025]))+ (-1.600891 * float(x[1026]))+ (0.9916306 * float(x[1027]))+ (-0.7412885 * float(x[1028]))+ (-0.05708536 * float(x[1029]))+ (-0.8638138 * float(x[1030]))+ (0.8877017 * float(x[1031]))+ (0.92984986 * float(x[1032]))+ (0.43877813 * float(x[1033]))+ (-0.30001432 * float(x[1034]))+ (-0.4912352 * float(x[1035]))+ (-0.46939334 * float(x[1036]))+ (-0.74541193 * float(x[1037]))+ (0.051617905 * float(x[1038]))+ (-0.71636546 * float(x[1039]))+ (-0.36653867 * float(x[1040]))+ (0.25341296 * float(x[1041]))+ (0.4550872 * float(x[1042]))+ (-1.9230428 * float(x[1043]))+ (-0.13976805 * float(x[1044]))+ (1.1709446 * float(x[1045]))+ (1.577312 * float(x[1046]))+ (0.28121996 * float(x[1047]))+ (0.9384118 * float(x[1048]))+ (-0.4687349 * float(x[1049])))+ ((-0.9729826 * float(x[1050]))+ (-0.03249427 * float(x[1051]))+ (-0.4877724 * float(x[1052]))+ (1.1259906 * float(x[1053]))+ (-0.53445464 * float(x[1054]))+ (-0.37874156 * float(x[1055]))+ (0.58245486 * float(x[1056]))+ (0.4302865 * float(x[1057]))+ (0.11610247 * float(x[1058]))+ (0.40989614 * float(x[1059]))+ (1.1431954 * float(x[1060]))+ (-0.6487212 * float(x[1061]))+ (-0.97728974 * float(x[1062]))+ (0.022443576 * float(x[1063]))+ (-0.833418 * float(x[1064]))+ (-0.897849 * float(x[1065]))+ (0.93103325 * float(x[1066]))+ (0.7180053 * float(x[1067]))+ (-0.69594556 * float(x[1068]))+ (-0.9986716 * float(x[1069]))+ (0.8833356 * float(x[1070]))+ (-0.4433494 * float(x[1071]))+ (-0.6282048 * float(x[1072]))+ (0.38301623 * float(x[1073]))+ (-0.7821925 * float(x[1074]))+ (-0.4707008 * float(x[1075]))+ (0.95018935 * float(x[1076]))+ (0.27892554 * float(x[1077]))+ (-0.6288491 * float(x[1078]))+ (-0.20416278 * float(x[1079]))+ (0.54900193 * float(x[1080]))+ (-0.71808505 * float(x[1081]))+ (0.08697535 * float(x[1082]))+ (0.722246 * float(x[1083]))+ (0.23531397 * float(x[1084]))+ (-0.9141876 * float(x[1085]))+ (0.4017113 * float(x[1086]))+ (-0.010442988 * float(x[1087]))+ (0.049154136 * float(x[1088]))+ (0.039020665 * float(x[1089]))+ (-0.7594453 * float(x[1090]))+ (0.5098022 * float(x[1091]))+ (0.77004373 * float(x[1092]))+ (-0.79949653 * float(x[1093]))+ (0.5177461 * float(x[1094]))+ (-0.965879 * float(x[1095]))+ (0.9341098 * float(x[1096]))+ (0.57077473 * float(x[1097]))+ (0.10487812 * float(x[1098]))+ (-0.40810034 * float(x[1099])))+ ((0.85858333 * float(x[1100]))+ (-0.46826994 * float(x[1101]))+ (0.6562932 * float(x[1102]))+ (0.97021735 * float(x[1103]))+ (0.56679326 * float(x[1104]))+ (0.03797984 * float(x[1105]))+ (-0.8678515 * float(x[1106]))+ (-0.05517242 * float(x[1107]))+ (0.20708264 * float(x[1108]))+ (-0.5944079 * float(x[1109]))+ (-0.15282473 * float(x[1110]))+ (-0.28448424 * float(x[1111]))+ (-0.6726315 * float(x[1112]))+ (-0.11725172 * float(x[1113]))+ (-0.47440007 * float(x[1114]))+ (0.04412484 * float(x[1115]))+ (-0.1288396 * float(x[1116]))+ (1.2910146 * float(x[1117]))+ (0.96329725 * float(x[1118]))+ (0.105162665 * float(x[1119]))+ (0.70361716 * float(x[1120]))+ (0.92479014 * float(x[1121]))+ (-0.7789554 * float(x[1122]))+ (0.26166362 * float(x[1123]))+ (0.96987015 * float(x[1124]))+ (0.97577834 * float(x[1125]))+ (0.20664598 * float(x[1126]))+ (-0.74395823 * float(x[1127]))+ (0.16638567 * float(x[1128]))+ (-0.9958707 * float(x[1129]))+ (-0.6021773 * float(x[1130]))+ (1.252905 * float(x[1131]))+ (-0.33911887 * float(x[1132]))+ (0.27678022 * float(x[1133]))+ (-0.438281 * float(x[1134]))+ (0.8956438 * float(x[1135]))+ (-0.50844324 * float(x[1136]))+ (-0.34069768 * float(x[1137]))+ (0.58352286 * float(x[1138]))+ (-1.7552571 * float(x[1139]))+ (-0.21536212 * float(x[1140]))+ (-0.5575637 * float(x[1141]))+ (0.7081116 * float(x[1142]))+ (-0.4645371 * float(x[1143]))+ (-0.20594834 * float(x[1144]))+ (-0.44670054 * float(x[1145]))+ (0.012685839 * float(x[1146]))+ (-0.30020463 * float(x[1147]))+ (0.41282114 * float(x[1148]))+ (-0.95084596 * float(x[1149])))+ ((0.26797384 * float(x[1150]))+ (-0.5388574 * float(x[1151]))+ (-0.46258193 * float(x[1152]))+ (0.93107986 * float(x[1153]))+ (1.2417064 * float(x[1154]))+ (-0.36689958 * float(x[1155]))+ (0.6536105 * float(x[1156]))+ (-0.7920183 * float(x[1157]))+ (0.26796332 * float(x[1158]))+ (0.5020646 * float(x[1159]))+ (-0.68883234 * float(x[1160]))+ (-0.14799522 * float(x[1161]))+ (0.78541434 * float(x[1162]))+ (-0.79284304 * float(x[1163]))+ (-0.5955997 * float(x[1164]))+ (0.18117076 * float(x[1165]))+ (-0.87713724 * float(x[1166]))+ (0.9279471 * float(x[1167]))+ (0.8469111 * float(x[1168]))+ (-0.40169272 * float(x[1169]))+ (-0.22319177 * float(x[1170]))+ (-0.027455827 * float(x[1171]))+ (0.17551474 * float(x[1172]))+ (0.96770763 * float(x[1173]))+ (0.3946605 * float(x[1174]))+ (-0.22090298 * float(x[1175]))+ (-0.47246462 * float(x[1176]))+ (0.8892514 * float(x[1177]))+ (-0.7289031 * float(x[1178]))+ (-0.39647996 * float(x[1179]))+ (1.7216101 * float(x[1180]))+ (0.32933116 * float(x[1181]))+ (-0.15389112 * float(x[1182]))+ (-0.6020181 * float(x[1183]))+ (-0.26504937 * float(x[1184]))+ (0.41374362 * float(x[1185]))+ (0.29906845 * float(x[1186]))+ (0.8559523 * float(x[1187]))+ (0.73372185 * float(x[1188]))+ (0.6323015 * float(x[1189]))+ (0.8229017 * float(x[1190]))+ (-0.4473257 * float(x[1191]))+ (-0.96796334 * float(x[1192]))+ (-0.24021219 * float(x[1193]))+ (0.014693649 * float(x[1194]))+ (-0.6351517 * float(x[1195]))+ (-1.246652 * float(x[1196]))+ (-0.96107507 * float(x[1197]))+ (0.12901568 * float(x[1198]))+ (-0.38294408 * float(x[1199])))+ ((0.88436943 * float(x[1200]))+ (0.7765301 * float(x[1201]))+ (0.72062135 * float(x[1202]))+ (0.30599952 * float(x[1203]))+ (0.029237032 * float(x[1204]))+ (0.09769853 * float(x[1205]))+ (0.63045007 * float(x[1206]))+ (-0.47220886 * float(x[1207]))+ (0.6021498 * float(x[1208]))+ (-0.9176404 * float(x[1209]))+ (0.63284206 * float(x[1210]))+ (0.9557863 * float(x[1211]))+ (-0.8979854 * float(x[1212]))+ (0.25432143 * float(x[1213]))+ (0.0049061486 * float(x[1214]))+ (-0.660361 * float(x[1215]))+ (-0.7032421 * float(x[1216]))+ (0.54651827 * float(x[1217]))+ (0.46595582 * float(x[1218]))+ (0.9659983 * float(x[1219]))+ (0.96449554 * float(x[1220]))+ (-0.0039920905 * float(x[1221]))+ (-0.42211026 * float(x[1222]))+ (0.8765123 * float(x[1223]))+ (-0.5108608 * float(x[1224]))+ (-0.08357548 * float(x[1225]))+ (0.5148131 * float(x[1226]))+ (-0.22455011 * float(x[1227]))+ (0.13262321 * float(x[1228]))+ (-0.2601582 * float(x[1229]))+ (-0.79052776 * float(x[1230]))+ (-0.7668828 * float(x[1231]))+ (-0.28472194 * float(x[1232]))+ (-0.99069035 * float(x[1233]))+ (-0.15029216 * float(x[1234]))+ (0.6690529 * float(x[1235]))+ (-0.19662362 * float(x[1236]))+ (-0.8284108 * float(x[1237]))+ (-0.8746223 * float(x[1238]))+ (-0.44376698 * float(x[1239]))+ (-1.6269352 * float(x[1240]))+ (0.93018997 * float(x[1241]))+ (-0.69753957 * float(x[1242]))+ (1.2821531 * float(x[1243]))+ (0.17221588 * float(x[1244]))+ (0.13857384 * float(x[1245]))+ (0.024161432 * float(x[1246]))+ (2.1508803 * float(x[1247]))+ (-0.27231044 * float(x[1248]))+ (0.9164902 * float(x[1249])))+ ((0.110588215 * float(x[1250]))+ (-0.20873266 * float(x[1251]))+ (0.9109319 * float(x[1252]))+ (-0.6917535 * float(x[1253]))+ (-0.76216614 * float(x[1254]))+ (-1.1045035 * float(x[1255]))+ (0.56316346 * float(x[1256]))+ (0.38749406 * float(x[1257]))+ (0.83268064 * float(x[1258]))+ (-0.48124522 * float(x[1259]))+ (0.88459504 * float(x[1260]))+ (0.39830062 * float(x[1261]))+ (0.1472195 * float(x[1262]))+ (0.91009337 * float(x[1263]))+ (0.052253786 * float(x[1264]))+ (0.7231819 * float(x[1265]))+ (-0.2818058 * float(x[1266]))+ (-0.001446746 * float(x[1267]))+ (0.27721834 * float(x[1268]))+ (-0.14000644 * float(x[1269]))+ (-0.92851466 * float(x[1270]))+ (0.54025626 * float(x[1271]))+ (0.0042111613 * float(x[1272]))+ (-0.15842715 * float(x[1273]))+ (0.4960456 * float(x[1274]))+ (0.58705354 * float(x[1275]))+ (0.74287474 * float(x[1276]))+ (0.6015972 * float(x[1277]))+ (0.1420512 * float(x[1278]))+ (-0.0533476 * float(x[1279]))+ (0.35025182 * float(x[1280]))+ (-0.95728266 * float(x[1281]))+ (-0.79536635 * float(x[1282]))+ (-0.41564527 * float(x[1283]))+ (0.96598023 * float(x[1284]))+ (-0.72050846 * float(x[1285]))+ (-0.3388074 * float(x[1286]))+ (-0.89789385 * float(x[1287]))+ (-0.33746225 * float(x[1288]))+ (-0.35934743 * float(x[1289]))+ (0.89361435 * float(x[1290]))+ (0.69030815 * float(x[1291]))+ (-0.23447156 * float(x[1292]))+ (-0.95046186 * float(x[1293]))+ (0.6620622 * float(x[1294]))+ (0.32107234 * float(x[1295]))+ (-0.695271 * float(x[1296]))+ (0.99214256 * float(x[1297]))+ (-0.7995331 * float(x[1298]))+ (0.7342291 * float(x[1299])))+ ((-0.41146767 * float(x[1300]))+ (-0.12929307 * float(x[1301]))+ (0.9315718 * float(x[1302]))+ (0.3550167 * float(x[1303]))+ (0.8798535 * float(x[1304]))+ (0.24228065 * float(x[1305]))+ (0.90612566 * float(x[1306]))+ (0.020520385 * float(x[1307]))+ (0.538088 * float(x[1308]))+ (0.4237409 * float(x[1309]))+ (-0.8925329 * float(x[1310]))+ (-0.2075545 * float(x[1311]))+ (-0.66512835 * float(x[1312]))+ (0.6438078 * float(x[1313]))+ (0.40105724 * float(x[1314]))+ (0.7661552 * float(x[1315]))+ (0.93315023 * float(x[1316]))+ (0.5494952 * float(x[1317]))+ (0.98846614 * float(x[1318]))+ (0.22953977 * float(x[1319]))+ (-0.9257408 * float(x[1320]))+ (-0.6308383 * float(x[1321]))+ (-0.31579226 * float(x[1322]))+ (0.64694345 * float(x[1323]))+ (0.7322694 * float(x[1324]))+ (0.9216251 * float(x[1325]))+ (-0.52909833 * float(x[1326]))+ (-0.9108578 * float(x[1327]))+ (0.8265672 * float(x[1328]))+ (-0.38990662 * float(x[1329]))+ (0.1159748 * float(x[1330]))+ (0.96488976 * float(x[1331]))+ (-0.19910292 * float(x[1332]))+ (0.3317428 * float(x[1333]))+ (-0.19824088 * float(x[1334]))+ (0.53638935 * float(x[1335]))+ (-0.31048173 * float(x[1336]))+ (-0.5249537 * float(x[1337]))+ (0.40930757 * float(x[1338]))+ (0.38281378 * float(x[1339]))+ (0.064640656 * float(x[1340]))+ (1.7762244 * float(x[1341]))+ (0.8985598 * float(x[1342]))+ (0.38817474 * float(x[1343]))+ (1.6619976 * float(x[1344]))+ (-0.66214776 * float(x[1345]))+ (-0.25187474 * float(x[1346]))+ (0.16821915 * float(x[1347]))+ (0.37276047 * float(x[1348]))+ (-0.40821606 * float(x[1349])))+ ((-0.025208028 * float(x[1350]))+ (-1.2598099 * float(x[1351]))+ (0.62060416 * float(x[1352]))+ (0.15518019 * float(x[1353]))+ (-0.84944546 * float(x[1354]))+ (0.023187565 * float(x[1355]))+ (-0.2574261 * float(x[1356]))+ (0.5331821 * float(x[1357]))+ (0.3814921 * float(x[1358]))+ (0.41596472 * float(x[1359]))+ (-0.40516177 * float(x[1360]))+ (-0.057486504 * float(x[1361]))+ (0.09651256 * float(x[1362]))+ (0.08670528 * float(x[1363]))+ (-0.19093968 * float(x[1364]))+ (0.9137411 * float(x[1365]))+ (-0.44402012 * float(x[1366]))+ (-0.38502482 * float(x[1367]))+ (0.3199411 * float(x[1368]))+ (0.16047575 * float(x[1369]))+ (0.54975957 * float(x[1370]))+ (0.21786025 * float(x[1371]))+ (-0.92661715 * float(x[1372]))+ (-0.37462947 * float(x[1373]))+ (0.51257443 * float(x[1374]))+ (-0.8324173 * float(x[1375]))+ (0.0322474 * float(x[1376]))+ (-0.5602785 * float(x[1377]))+ (-0.4514086 * float(x[1378]))+ (0.40368098 * float(x[1379]))+ (-0.9396145 * float(x[1380]))+ (0.74663883 * float(x[1381]))+ (-0.11104209 * float(x[1382]))+ (0.004786588 * float(x[1383]))+ (0.080095924 * float(x[1384]))+ (0.29108858 * float(x[1385]))+ (-0.31028682 * float(x[1386]))+ (-0.79778504 * float(x[1387]))+ (-0.36324212 * float(x[1388]))+ (-0.6637158 * float(x[1389]))+ (0.11226636 * float(x[1390]))+ (-0.36394274 * float(x[1391]))+ (0.91613436 * float(x[1392]))+ (1.2996765 * float(x[1393]))+ (0.5708204 * float(x[1394]))+ (0.23499453 * float(x[1395]))+ (0.9707571 * float(x[1396]))+ (0.7744851 * float(x[1397]))+ (0.5301399 * float(x[1398]))+ (1.7783588 * float(x[1399])))+ ((-0.26892194 * float(x[1400]))+ (-0.59746647 * float(x[1401]))+ (-0.025703747 * float(x[1402]))+ (0.98073703 * float(x[1403]))+ (0.8243019 * float(x[1404]))+ (-1.4335058 * float(x[1405]))+ (-0.9496194 * float(x[1406]))+ (0.79727536 * float(x[1407]))+ (0.074340254 * float(x[1408]))+ (-0.5996202 * float(x[1409]))+ (0.7155141 * float(x[1410]))+ (0.28844637 * float(x[1411]))+ (-0.7558288 * float(x[1412]))+ (-0.112591594 * float(x[1413]))+ (-0.87984407 * float(x[1414]))+ (-0.58027905 * float(x[1415]))+ (-0.73538864 * float(x[1416]))+ (-0.6135274 * float(x[1417]))+ (0.37093428 * float(x[1418]))+ (-0.9010005 * float(x[1419]))+ (-0.79629076 * float(x[1420]))+ (-0.73165274 * float(x[1421]))+ (-0.03634671 * float(x[1422]))+ (-0.40249938 * float(x[1423]))+ (-0.15930168 * float(x[1424]))+ (0.5010733 * float(x[1425]))+ (0.9960456 * float(x[1426]))+ (0.067955844 * float(x[1427]))+ (0.014757909 * float(x[1428]))+ (0.13387835 * float(x[1429]))+ (-0.7866351 * float(x[1430]))+ (-0.8899908 * float(x[1431]))+ (-0.40774447 * float(x[1432]))+ (-0.013186076 * float(x[1433]))+ (2.1991134 * float(x[1434]))+ (0.26275915 * float(x[1435]))+ (-0.01490597 * float(x[1436]))+ (0.76952964 * float(x[1437]))+ (0.4039552 * float(x[1438]))+ (-0.020630175 * float(x[1439]))+ (-0.73662543 * float(x[1440]))+ (-0.20597267 * float(x[1441]))+ (0.40880308 * float(x[1442]))+ (-0.43022895 * float(x[1443]))+ (-0.79202384 * float(x[1444]))+ (2.7008333 * float(x[1445]))+ (1.8899558 * float(x[1446]))+ (0.23055285 * float(x[1447]))+ (0.58499783 * float(x[1448]))+ (0.67129207 * float(x[1449])))+ ((-0.033082005 * float(x[1450]))+ (-0.14394236 * float(x[1451]))+ (0.832838 * float(x[1452]))+ (-0.4568978 * float(x[1453]))+ (3.333464 * float(x[1454]))+ (0.39382675 * float(x[1455]))+ (0.07589156 * float(x[1456]))+ (0.8753262 * float(x[1457]))+ (-0.3896226 * float(x[1458]))+ (0.966868 * float(x[1459]))+ (0.80426246 * float(x[1460]))+ (-0.08255422 * float(x[1461]))+ (0.63490653 * float(x[1462]))+ (0.538094 * float(x[1463]))+ (0.35578993 * float(x[1464]))+ (1.524688 * float(x[1465]))+ (-0.60709804 * float(x[1466]))+ (0.3430554 * float(x[1467]))+ (0.34108204 * float(x[1468]))+ (-0.9674944 * float(x[1469]))+ (0.28560674 * float(x[1470]))+ (-0.11425395 * float(x[1471]))+ (0.79617554 * float(x[1472]))+ (-0.35705414 * float(x[1473]))+ (-0.020142607 * float(x[1474]))+ (0.029534208 * float(x[1475]))+ (-0.79256403 * float(x[1476]))+ (-0.1441444 * float(x[1477]))+ (0.6609527 * float(x[1478]))+ (-0.88418144 * float(x[1479]))+ (-0.41722235 * float(x[1480]))+ (-0.9239106 * float(x[1481]))+ (1.4418712 * float(x[1482]))+ (0.70648414 * float(x[1483]))+ (0.9284008 * float(x[1484]))+ (0.06298856 * float(x[1485]))+ (0.60413706 * float(x[1486]))+ (-0.25117204 * float(x[1487]))+ (-1.1775883 * float(x[1488]))+ (-1.2150525 * float(x[1489]))+ (0.31572425 * float(x[1490]))+ (-0.2810937 * float(x[1491]))+ (-0.08449152 * float(x[1492]))+ (0.96654975 * float(x[1493]))+ (-0.939147 * float(x[1494]))+ (-0.6127534 * float(x[1495]))+ (-0.77558124 * float(x[1496]))+ (-0.9152719 * float(x[1497]))+ (-0.544518 * float(x[1498]))+ (-0.10641336 * float(x[1499])))+ ((0.6739807 * float(x[1500]))+ (-0.55635196 * float(x[1501]))+ (-0.5820385 * float(x[1502]))+ (-0.025988944 * float(x[1503]))+ (0.26098636 * float(x[1504]))+ (0.596158 * float(x[1505]))+ (0.10198794 * float(x[1506]))+ (2.4328034 * float(x[1507]))+ (0.17732374 * float(x[1508]))+ (0.56288934 * float(x[1509]))+ (-0.6040344 * float(x[1510]))+ (-0.19045274 * float(x[1511]))+ (0.20255435 * float(x[1512]))+ (0.8845204 * float(x[1513]))+ (-0.17382775 * float(x[1514]))+ (0.4201166 * float(x[1515]))+ (0.57973903 * float(x[1516]))+ (-0.36547962 * float(x[1517]))+ (0.77978504 * float(x[1518]))+ (0.29931298 * float(x[1519]))+ (0.76199615 * float(x[1520]))+ (0.11187538 * float(x[1521]))+ (-0.48838252 * float(x[1522]))+ (0.5410881 * float(x[1523]))+ (0.81649673 * float(x[1524]))+ (-0.69930047 * float(x[1525]))+ (1.1279377 * float(x[1526]))+ (-0.71317196 * float(x[1527]))+ (0.84631807 * float(x[1528]))+ (-1.497349 * float(x[1529]))+ (0.9651478 * float(x[1530]))+ (0.75090265 * float(x[1531]))+ (-0.5116887 * float(x[1532]))+ (-0.01806723 * float(x[1533]))+ (-0.27241945 * float(x[1534]))+ (0.4763031 * float(x[1535]))+ (0.8129882 * float(x[1536]))+ (0.029801294 * float(x[1537]))+ (-0.37813923 * float(x[1538]))+ (-0.0031304287 * float(x[1539]))+ (0.40357152 * float(x[1540]))+ (0.2553841 * float(x[1541]))+ (-1.0730319 * float(x[1542]))+ (-0.037915103 * float(x[1543]))+ (-1.2859402 * float(x[1544]))+ (0.7928879 * float(x[1545]))+ (0.17255464 * float(x[1546]))+ (-0.3451703 * float(x[1547]))+ (-0.2086528 * float(x[1548]))+ (0.6097569 * float(x[1549])))+ ((0.0073836767 * float(x[1550]))+ (1.2233983 * float(x[1551]))+ (-0.13959916 * float(x[1552]))+ (-0.7450022 * float(x[1553]))+ (1.6597929 * float(x[1554]))+ (0.098026164 * float(x[1555]))+ (2.0284474 * float(x[1556]))+ (-0.14985012 * float(x[1557]))) + -2.4330037), 0)
    h_1 = max((((-0.025177775 * float(x[0]))+ (0.027233656 * float(x[1]))+ (-0.1614123 * float(x[2]))+ (-0.089758605 * float(x[3]))+ (-1.0190578 * float(x[4]))+ (-0.60787684 * float(x[5]))+ (-0.07001049 * float(x[6]))+ (-0.062388178 * float(x[7]))+ (-1.0096822 * float(x[8]))+ (-1.8526933 * float(x[9]))+ (-1.7609637 * float(x[10]))+ (4.180082 * float(x[11]))+ (-0.6263773 * float(x[12]))+ (-0.46334732 * float(x[13]))+ (3.25875 * float(x[14]))+ (-1.6862371 * float(x[15]))+ (-0.18530299 * float(x[16]))+ (-0.86304903 * float(x[17]))+ (-0.816614 * float(x[18]))+ (-0.4239288 * float(x[19]))+ (3.1236231 * float(x[20]))+ (1.4516518 * float(x[21]))+ (-1.6962706 * float(x[22]))+ (-0.73825556 * float(x[23]))+ (-1.1663448 * float(x[24]))+ (-1.5405706 * float(x[25]))+ (0.74600047 * float(x[26]))+ (0.14710462 * float(x[27]))+ (-1.4952081 * float(x[28]))+ (0.51335245 * float(x[29]))+ (-1.2983162 * float(x[30]))+ (-1.4617594 * float(x[31]))+ (-0.110127166 * float(x[32]))+ (0.032875836 * float(x[33]))+ (-0.778024 * float(x[34]))+ (-0.62209505 * float(x[35]))+ (3.2330413 * float(x[36]))+ (-0.5945887 * float(x[37]))+ (-0.75643843 * float(x[38]))+ (-1.1107708 * float(x[39]))+ (-0.9097238 * float(x[40]))+ (0.15730362 * float(x[41]))+ (-1.1816102 * float(x[42]))+ (-0.6707647 * float(x[43]))+ (-1.3994441 * float(x[44]))+ (0.9115385 * float(x[45]))+ (-0.9552073 * float(x[46]))+ (-0.9811375 * float(x[47]))+ (-1.5920287 * float(x[48]))+ (0.08679072 * float(x[49])))+ ((-0.35250294 * float(x[50]))+ (-0.7356851 * float(x[51]))+ (-0.7637166 * float(x[52]))+ (-1.2601125 * float(x[53]))+ (-1.273584 * float(x[54]))+ (-1.3581563 * float(x[55]))+ (-0.37345895 * float(x[56]))+ (-1.0262864 * float(x[57]))+ (1.7650123 * float(x[58]))+ (2.5324557 * float(x[59]))+ (-0.9025891 * float(x[60]))+ (-1.122411 * float(x[61]))+ (-0.9266465 * float(x[62]))+ (-0.5877219 * float(x[63]))+ (-0.13226104 * float(x[64]))+ (3.3208904 * float(x[65]))+ (-1.8746544 * float(x[66]))+ (-0.710195 * float(x[67]))+ (-1.6687231 * float(x[68]))+ (2.9065976 * float(x[69]))+ (2.4524484 * float(x[70]))+ (-1.4168512 * float(x[71]))+ (-1.0052963 * float(x[72]))+ (-1.1300359 * float(x[73]))+ (-0.9169154 * float(x[74]))+ (-4.282784 * float(x[75]))+ (-0.07520711 * float(x[76]))+ (-0.51354575 * float(x[77]))+ (-0.3400815 * float(x[78]))+ (-1.6851835 * float(x[79]))+ (-1.7237568 * float(x[80]))+ (0.2175962 * float(x[81]))+ (-0.98748404 * float(x[82]))+ (-1.0139866 * float(x[83]))+ (-1.7869322 * float(x[84]))+ (-0.1007235 * float(x[85]))+ (1.5054477 * float(x[86]))+ (-1.5817264 * float(x[87]))+ (-0.00417113 * float(x[88]))+ (-1.3372611 * float(x[89]))+ (-0.38859642 * float(x[90]))+ (1.0193912 * float(x[91]))+ (-0.23780213 * float(x[92]))+ (-1.0588542 * float(x[93]))+ (-0.7864705 * float(x[94]))+ (6.7949 * float(x[95]))+ (3.0173426 * float(x[96]))+ (-0.6268391 * float(x[97]))+ (-0.030422986 * float(x[98]))+ (0.05867526 * float(x[99])))+ ((-2.114561 * float(x[100]))+ (-1.6085857 * float(x[101]))+ (3.4480186 * float(x[102]))+ (-0.42841494 * float(x[103]))+ (1.2778758 * float(x[104]))+ (-1.2948395 * float(x[105]))+ (-1.1611766 * float(x[106]))+ (-1.4669452 * float(x[107]))+ (-1.6059606 * float(x[108]))+ (-0.9103577 * float(x[109]))+ (-1.1479456 * float(x[110]))+ (0.49189135 * float(x[111]))+ (-1.2399843 * float(x[112]))+ (4.3701997 * float(x[113]))+ (-0.3381033 * float(x[114]))+ (-0.93461084 * float(x[115]))+ (0.5568647 * float(x[116]))+ (-0.020815568 * float(x[117]))+ (-0.733384 * float(x[118]))+ (-0.15703057 * float(x[119]))+ (2.5287092 * float(x[120]))+ (-1.7067192 * float(x[121]))+ (-1.0186673 * float(x[122]))+ (-1.3026855 * float(x[123]))+ (-0.53420013 * float(x[124]))+ (-0.6668182 * float(x[125]))+ (0.0372665 * float(x[126]))+ (0.67904633 * float(x[127]))+ (-1.0804565 * float(x[128]))+ (-1.5406255 * float(x[129]))+ (-0.03665742 * float(x[130]))+ (-0.8654624 * float(x[131]))+ (-0.031657666 * float(x[132]))+ (-0.24242745 * float(x[133]))+ (2.6956227 * float(x[134]))+ (-0.12721035 * float(x[135]))+ (-1.8931938 * float(x[136]))+ (0.7843818 * float(x[137]))+ (-1.5964041 * float(x[138]))+ (1.23602 * float(x[139]))+ (-1.9093412 * float(x[140]))+ (-1.2763958 * float(x[141]))+ (-1.2195038 * float(x[142]))+ (-0.76485103 * float(x[143]))+ (0.05119085 * float(x[144]))+ (-0.90314996 * float(x[145]))+ (-0.32674456 * float(x[146]))+ (-0.98553216 * float(x[147]))+ (-1.8254573 * float(x[148]))+ (-2.23779 * float(x[149])))+ ((-0.6282793 * float(x[150]))+ (-1.1987686 * float(x[151]))+ (-0.38647765 * float(x[152]))+ (-0.07923476 * float(x[153]))+ (-1.3417166 * float(x[154]))+ (3.1369576 * float(x[155]))+ (-1.2423699 * float(x[156]))+ (-0.41920492 * float(x[157]))+ (3.0486267 * float(x[158]))+ (-0.33033723 * float(x[159]))+ (-1.2777809 * float(x[160]))+ (-1.8266402 * float(x[161]))+ (-0.36896607 * float(x[162]))+ (3.5029116 * float(x[163]))+ (-0.94025385 * float(x[164]))+ (1.8908471 * float(x[165]))+ (-1.4535716 * float(x[166]))+ (4.6954975 * float(x[167]))+ (-0.52887404 * float(x[168]))+ (-1.1652192 * float(x[169]))+ (-1.4663237 * float(x[170]))+ (-0.6459506 * float(x[171]))+ (-0.21018504 * float(x[172]))+ (-1.4041808 * float(x[173]))+ (-1.4652623 * float(x[174]))+ (6.3705444 * float(x[175]))+ (-0.95946044 * float(x[176]))+ (-1.8928583 * float(x[177]))+ (-1.2904409 * float(x[178]))+ (-0.7308202 * float(x[179]))+ (8.183898 * float(x[180]))+ (2.8390155 * float(x[181]))+ (-0.31332022 * float(x[182]))+ (3.8403995 * float(x[183]))+ (-0.7023059 * float(x[184]))+ (-0.2635808 * float(x[185]))+ (-2.1499531 * float(x[186]))+ (0.79003644 * float(x[187]))+ (-1.7813753 * float(x[188]))+ (2.4031508 * float(x[189]))+ (4.732318 * float(x[190]))+ (-1.4421982 * float(x[191]))+ (-0.028031394 * float(x[192]))+ (2.7148035 * float(x[193]))+ (0.19787042 * float(x[194]))+ (-1.3951033 * float(x[195]))+ (-0.5644466 * float(x[196]))+ (-0.8413738 * float(x[197]))+ (-1.8402486 * float(x[198]))+ (-1.9331363 * float(x[199])))+ ((-1.9332676 * float(x[200]))+ (-2.8528614 * float(x[201]))+ (-3.2188256 * float(x[202]))+ (-0.60908973 * float(x[203]))+ (-0.3443598 * float(x[204]))+ (-0.38688746 * float(x[205]))+ (-1.3695229 * float(x[206]))+ (0.8774359 * float(x[207]))+ (0.12986596 * float(x[208]))+ (-0.5650102 * float(x[209]))+ (-0.2166029 * float(x[210]))+ (-1.6945182 * float(x[211]))+ (-1.9253157 * float(x[212]))+ (-0.6982666 * float(x[213]))+ (-0.06117987 * float(x[214]))+ (-1.6725024 * float(x[215]))+ (-1.5582553 * float(x[216]))+ (-0.6024317 * float(x[217]))+ (0.046680175 * float(x[218]))+ (-0.4502733 * float(x[219]))+ (-0.010889758 * float(x[220]))+ (0.5926186 * float(x[221]))+ (-0.4211857 * float(x[222]))+ (-0.87712926 * float(x[223]))+ (3.4822085 * float(x[224]))+ (-0.96121806 * float(x[225]))+ (-1.2911179 * float(x[226]))+ (-2.1496656 * float(x[227]))+ (-0.41539925 * float(x[228]))+ (-0.82079697 * float(x[229]))+ (-1.4141371 * float(x[230]))+ (1.2088282 * float(x[231]))+ (0.66974664 * float(x[232]))+ (-1.0044321 * float(x[233]))+ (-0.3786042 * float(x[234]))+ (-2.8570125 * float(x[235]))+ (-0.12996344 * float(x[236]))+ (-0.49683994 * float(x[237]))+ (-0.49280456 * float(x[238]))+ (-0.99853003 * float(x[239]))+ (-2.7017713 * float(x[240]))+ (-0.395208 * float(x[241]))+ (-1.0656497 * float(x[242]))+ (-4.354663 * float(x[243]))+ (-0.5259538 * float(x[244]))+ (0.22138602 * float(x[245]))+ (4.3150744 * float(x[246]))+ (-0.35236204 * float(x[247]))+ (3.9280624 * float(x[248]))+ (-0.4313124 * float(x[249])))+ ((-1.5406783 * float(x[250]))+ (0.10826815 * float(x[251]))+ (-1.3797972 * float(x[252]))+ (-0.9592958 * float(x[253]))+ (-0.20745438 * float(x[254]))+ (-1.0405748 * float(x[255]))+ (-0.6866654 * float(x[256]))+ (0.12239397 * float(x[257]))+ (-0.36346492 * float(x[258]))+ (-0.36761183 * float(x[259]))+ (-0.079416364 * float(x[260]))+ (0.6735253 * float(x[261]))+ (-1.4019784 * float(x[262]))+ (-0.8087639 * float(x[263]))+ (-0.7386792 * float(x[264]))+ (-1.2127193 * float(x[265]))+ (0.8408834 * float(x[266]))+ (1.9897963 * float(x[267]))+ (1.5575494 * float(x[268]))+ (6.520614 * float(x[269]))+ (2.877837 * float(x[270]))+ (-0.7934803 * float(x[271]))+ (-0.5688442 * float(x[272]))+ (-0.31877303 * float(x[273]))+ (0.8371366 * float(x[274]))+ (-1.1177135 * float(x[275]))+ (-0.05400549 * float(x[276]))+ (-0.1471958 * float(x[277]))+ (2.4062989 * float(x[278]))+ (-0.3739526 * float(x[279]))+ (0.52216923 * float(x[280]))+ (-1.6157118 * float(x[281]))+ (-2.077857 * float(x[282]))+ (-0.87779 * float(x[283]))+ (-2.7972913 * float(x[284]))+ (-0.13475217 * float(x[285]))+ (-0.8814862 * float(x[286]))+ (2.5786328 * float(x[287]))+ (-1.0546113 * float(x[288]))+ (-0.9054738 * float(x[289]))+ (-0.6848142 * float(x[290]))+ (-0.84955287 * float(x[291]))+ (-1.7570606 * float(x[292]))+ (3.4141035 * float(x[293]))+ (-1.384582 * float(x[294]))+ (-0.41176218 * float(x[295]))+ (-0.4256794 * float(x[296]))+ (-1.1145878 * float(x[297]))+ (0.803887 * float(x[298]))+ (0.048434358 * float(x[299])))+ ((-1.5024755 * float(x[300]))+ (-0.9314358 * float(x[301]))+ (-3.7875454 * float(x[302]))+ (-0.46557915 * float(x[303]))+ (2.8880494 * float(x[304]))+ (0.18816954 * float(x[305]))+ (-1.1248031 * float(x[306]))+ (3.6564288 * float(x[307]))+ (-0.910772 * float(x[308]))+ (-1.687544 * float(x[309]))+ (3.555771 * float(x[310]))+ (-0.92106086 * float(x[311]))+ (3.181134 * float(x[312]))+ (-1.2895423 * float(x[313]))+ (0.72115237 * float(x[314]))+ (-0.43330565 * float(x[315]))+ (-1.1160676 * float(x[316]))+ (3.9235916 * float(x[317]))+ (-3.2010813 * float(x[318]))+ (-1.2786578 * float(x[319]))+ (-1.6623547 * float(x[320]))+ (2.760591 * float(x[321]))+ (-1.2231162 * float(x[322]))+ (-0.72944033 * float(x[323]))+ (-0.6282253 * float(x[324]))+ (0.2869947 * float(x[325]))+ (-1.6087437 * float(x[326]))+ (-1.0918797 * float(x[327]))+ (-0.68440986 * float(x[328]))+ (2.444277 * float(x[329]))+ (4.220428 * float(x[330]))+ (-0.9987048 * float(x[331]))+ (-1.1998236 * float(x[332]))+ (-0.060794063 * float(x[333]))+ (-1.4620712 * float(x[334]))+ (-0.88295025 * float(x[335]))+ (-2.0348902 * float(x[336]))+ (-1.8863571 * float(x[337]))+ (-2.3092213 * float(x[338]))+ (-0.19091423 * float(x[339]))+ (-1.4943342 * float(x[340]))+ (3.478749 * float(x[341]))+ (-0.44321805 * float(x[342]))+ (-1.0841069 * float(x[343]))+ (-0.42281777 * float(x[344]))+ (-0.729983 * float(x[345]))+ (4.795556 * float(x[346]))+ (-0.83119565 * float(x[347]))+ (-1.0269457 * float(x[348]))+ (-1.7476801 * float(x[349])))+ ((3.071551 * float(x[350]))+ (3.668459 * float(x[351]))+ (-1.703601 * float(x[352]))+ (-0.4147375 * float(x[353]))+ (-2.276667 * float(x[354]))+ (2.796463 * float(x[355]))+ (-0.10541015 * float(x[356]))+ (0.035764266 * float(x[357]))+ (-0.99314004 * float(x[358]))+ (-1.8708042 * float(x[359]))+ (-0.4488321 * float(x[360]))+ (0.17571051 * float(x[361]))+ (-1.471513 * float(x[362]))+ (-1.5329016 * float(x[363]))+ (-0.651922 * float(x[364]))+ (-1.2468644 * float(x[365]))+ (-0.96266484 * float(x[366]))+ (-0.7294198 * float(x[367]))+ (-1.8767618 * float(x[368]))+ (-3.1943777 * float(x[369]))+ (-0.6053984 * float(x[370]))+ (-1.2009411 * float(x[371]))+ (4.508789 * float(x[372]))+ (-0.5118322 * float(x[373]))+ (-0.32798508 * float(x[374]))+ (-1.2790291 * float(x[375]))+ (-0.614235 * float(x[376]))+ (-2.8002841 * float(x[377]))+ (-1.5838495 * float(x[378]))+ (4.6248574 * float(x[379]))+ (-2.1513247 * float(x[380]))+ (3.4100795 * float(x[381]))+ (0.19727258 * float(x[382]))+ (-0.19458671 * float(x[383]))+ (0.31632605 * float(x[384]))+ (-0.2625466 * float(x[385]))+ (4.3958654 * float(x[386]))+ (-2.3481133 * float(x[387]))+ (-0.1672551 * float(x[388]))+ (3.6142325 * float(x[389]))+ (-0.7161045 * float(x[390]))+ (2.6995432 * float(x[391]))+ (-0.8076516 * float(x[392]))+ (-0.23300262 * float(x[393]))+ (-1.3066579 * float(x[394]))+ (-0.75132257 * float(x[395]))+ (-1.5723807 * float(x[396]))+ (-1.2030118 * float(x[397]))+ (5.512985 * float(x[398]))+ (-2.4552107 * float(x[399])))+ ((-0.020707823 * float(x[400]))+ (0.0038522368 * float(x[401]))+ (0.008801396 * float(x[402]))+ (-1.2337275 * float(x[403]))+ (-1.7873698 * float(x[404]))+ (3.8638854 * float(x[405]))+ (-0.5158405 * float(x[406]))+ (0.23790178 * float(x[407]))+ (-0.10090447 * float(x[408]))+ (-0.052859772 * float(x[409]))+ (-0.27893117 * float(x[410]))+ (-2.5190167 * float(x[411]))+ (-1.8246183 * float(x[412]))+ (-0.49714342 * float(x[413]))+ (-0.29422596 * float(x[414]))+ (-1.8366028 * float(x[415]))+ (-0.70814955 * float(x[416]))+ (3.0231986 * float(x[417]))+ (4.490733 * float(x[418]))+ (-1.2106836 * float(x[419]))+ (-1.0102565 * float(x[420]))+ (0.5950125 * float(x[421]))+ (-1.1563964 * float(x[422]))+ (-0.80591667 * float(x[423]))+ (-0.47995505 * float(x[424]))+ (-1.48221 * float(x[425]))+ (6.0804267 * float(x[426]))+ (2.913411 * float(x[427]))+ (-1.3759183 * float(x[428]))+ (-0.24636908 * float(x[429]))+ (2.0003035 * float(x[430]))+ (-0.7390005 * float(x[431]))+ (2.4993584 * float(x[432]))+ (0.25627813 * float(x[433]))+ (-1.0439373 * float(x[434]))+ (4.2172475 * float(x[435]))+ (-0.8172 * float(x[436]))+ (-1.3474013 * float(x[437]))+ (0.0028901761 * float(x[438]))+ (-1.392051 * float(x[439]))+ (2.821013 * float(x[440]))+ (-0.6615492 * float(x[441]))+ (-0.21343587 * float(x[442]))+ (-1.1724207 * float(x[443]))+ (-0.7575884 * float(x[444]))+ (-0.6957278 * float(x[445]))+ (-1.4851837 * float(x[446]))+ (0.45482457 * float(x[447]))+ (-0.5874009 * float(x[448]))+ (-0.6152476 * float(x[449])))+ ((-0.80419064 * float(x[450]))+ (0.61603147 * float(x[451]))+ (-1.0380244 * float(x[452]))+ (-1.014748 * float(x[453]))+ (-0.01817776 * float(x[454]))+ (-1.2110728 * float(x[455]))+ (-5.1306396 * float(x[456]))+ (2.9594545 * float(x[457]))+ (-1.0129087 * float(x[458]))+ (-3.4078043 * float(x[459]))+ (-0.7643678 * float(x[460]))+ (0.44458008 * float(x[461]))+ (-0.10430864 * float(x[462]))+ (-0.48273656 * float(x[463]))+ (-1.4191948 * float(x[464]))+ (-0.80750465 * float(x[465]))+ (-0.6828938 * float(x[466]))+ (0.31316778 * float(x[467]))+ (-0.07963229 * float(x[468]))+ (0.68090904 * float(x[469]))+ (4.7543826 * float(x[470]))+ (-0.14585312 * float(x[471]))+ (2.6654968 * float(x[472]))+ (0.021249518 * float(x[473]))+ (-1.5085713 * float(x[474]))+ (-0.45567328 * float(x[475]))+ (-0.35943264 * float(x[476]))+ (2.6077988 * float(x[477]))+ (3.7350612 * float(x[478]))+ (-1.6289802 * float(x[479]))+ (-0.9833046 * float(x[480]))+ (-0.99549544 * float(x[481]))+ (3.666767 * float(x[482]))+ (-0.37747633 * float(x[483]))+ (-0.0693402 * float(x[484]))+ (0.14040095 * float(x[485]))+ (-0.41921607 * float(x[486]))+ (0.4645402 * float(x[487]))+ (-0.89029664 * float(x[488]))+ (-1.2544782 * float(x[489]))+ (-1.609845 * float(x[490]))+ (-0.56123173 * float(x[491]))+ (-0.09486544 * float(x[492]))+ (-0.19555931 * float(x[493]))+ (-0.84397167 * float(x[494]))+ (-2.33501 * float(x[495]))+ (0.65825814 * float(x[496]))+ (-0.9419054 * float(x[497]))+ (-0.96189684 * float(x[498]))+ (-3.6511652 * float(x[499])))+ ((-1.831132 * float(x[500]))+ (-0.33497 * float(x[501]))+ (-1.2095348 * float(x[502]))+ (-1.5826844 * float(x[503]))+ (-0.20883143 * float(x[504]))+ (0.04843938 * float(x[505]))+ (-0.6423212 * float(x[506]))+ (-1.3289297 * float(x[507]))+ (9.246934 * float(x[508]))+ (-1.5621011 * float(x[509]))+ (-1.0074285 * float(x[510]))+ (5.9209375 * float(x[511]))+ (-1.0473373 * float(x[512]))+ (-1.7251595 * float(x[513]))+ (-1.6874914 * float(x[514]))+ (-0.3506566 * float(x[515]))+ (-0.8264462 * float(x[516]))+ (-0.78757095 * float(x[517]))+ (2.3920133 * float(x[518]))+ (-0.63586855 * float(x[519]))+ (-1.895433 * float(x[520]))+ (-0.36104408 * float(x[521]))+ (-1.2649118 * float(x[522]))+ (-1.5362183 * float(x[523]))+ (-0.74762976 * float(x[524]))+ (0.2966019 * float(x[525]))+ (0.05016014 * float(x[526]))+ (0.5996544 * float(x[527]))+ (1.5332803 * float(x[528]))+ (-1.2704023 * float(x[529]))+ (-1.380955 * float(x[530]))+ (-1.0923533 * float(x[531]))+ (-1.478939 * float(x[532]))+ (3.0589619 * float(x[533]))+ (0.8742037 * float(x[534]))+ (0.31008258 * float(x[535]))+ (-0.7509883 * float(x[536]))+ (-0.75266016 * float(x[537]))+ (-1.2521517 * float(x[538]))+ (-1.139189 * float(x[539]))+ (-0.29222885 * float(x[540]))+ (-0.35591173 * float(x[541]))+ (1.3706937 * float(x[542]))+ (-0.906521 * float(x[543]))+ (-0.33360532 * float(x[544]))+ (-1.174007 * float(x[545]))+ (-1.8656946 * float(x[546]))+ (-0.95963377 * float(x[547]))+ (0.9573558 * float(x[548]))+ (-0.061696023 * float(x[549])))+ ((-1.1037807 * float(x[550]))+ (-1.9893726 * float(x[551]))+ (-0.68398964 * float(x[552]))+ (-0.17469652 * float(x[553]))+ (-1.4745358 * float(x[554]))+ (-1.0495551 * float(x[555]))+ (-0.31444272 * float(x[556]))+ (-0.5052143 * float(x[557]))+ (-1.0697293 * float(x[558]))+ (-1.002129 * float(x[559]))+ (-0.5054968 * float(x[560]))+ (-0.54242694 * float(x[561]))+ (-0.5412691 * float(x[562]))+ (-0.9238177 * float(x[563]))+ (-0.78407395 * float(x[564]))+ (-0.42319748 * float(x[565]))+ (-0.71012247 * float(x[566]))+ (-0.40579587 * float(x[567]))+ (-0.95200205 * float(x[568]))+ (0.36549932 * float(x[569]))+ (-2.0342302 * float(x[570]))+ (-1.0043095 * float(x[571]))+ (2.7211974 * float(x[572]))+ (-1.7432299 * float(x[573]))+ (-0.4041068 * float(x[574]))+ (-0.73464507 * float(x[575]))+ (1.8413702 * float(x[576]))+ (0.6582882 * float(x[577]))+ (0.0784439 * float(x[578]))+ (-1.1650354 * float(x[579]))+ (-4.250778 * float(x[580]))+ (-0.20953053 * float(x[581]))+ (-1.232442 * float(x[582]))+ (-0.077820905 * float(x[583]))+ (-0.15560278 * float(x[584]))+ (-1.30131 * float(x[585]))+ (3.0172637 * float(x[586]))+ (-0.54820395 * float(x[587]))+ (-1.650922 * float(x[588]))+ (-1.5725297 * float(x[589]))+ (-1.21773 * float(x[590]))+ (-1.0815594 * float(x[591]))+ (-1.6313461 * float(x[592]))+ (-1.3214781 * float(x[593]))+ (-0.38643855 * float(x[594]))+ (0.10264092 * float(x[595]))+ (-0.34770986 * float(x[596]))+ (-0.40580845 * float(x[597]))+ (-1.065176 * float(x[598]))+ (-0.24140137 * float(x[599])))+ ((-0.6236114 * float(x[600]))+ (0.18169197 * float(x[601]))+ (-1.4771006 * float(x[602]))+ (-0.14486448 * float(x[603]))+ (-1.1139306 * float(x[604]))+ (-1.7589207 * float(x[605]))+ (0.5298049 * float(x[606]))+ (-0.3201233 * float(x[607]))+ (-0.93208325 * float(x[608]))+ (-1.6621109 * float(x[609]))+ (-1.8842283 * float(x[610]))+ (-1.030478 * float(x[611]))+ (-0.51797616 * float(x[612]))+ (-0.36718574 * float(x[613]))+ (1.4406388 * float(x[614]))+ (-0.893226 * float(x[615]))+ (-1.3809055 * float(x[616]))+ (-0.5649959 * float(x[617]))+ (-1.6608076 * float(x[618]))+ (-0.82579774 * float(x[619]))+ (-1.2154042 * float(x[620]))+ (-0.7715355 * float(x[621]))+ (3.4981773 * float(x[622]))+ (-1.1538441 * float(x[623]))+ (0.1637125 * float(x[624]))+ (1.9400705 * float(x[625]))+ (1.0482789 * float(x[626]))+ (2.9034407 * float(x[627]))+ (-1.327073 * float(x[628]))+ (0.43839067 * float(x[629]))+ (-1.2156823 * float(x[630]))+ (-1.6168503 * float(x[631]))+ (-0.23601899 * float(x[632]))+ (-0.37842214 * float(x[633]))+ (-0.17964968 * float(x[634]))+ (-0.29729208 * float(x[635]))+ (-4.2573395 * float(x[636]))+ (-1.6579467 * float(x[637]))+ (2.086314 * float(x[638]))+ (-0.9032712 * float(x[639]))+ (-1.3485318 * float(x[640]))+ (0.7245897 * float(x[641]))+ (-1.3375765 * float(x[642]))+ (2.089782 * float(x[643]))+ (-0.016985955 * float(x[644]))+ (-1.5571214 * float(x[645]))+ (-0.8896803 * float(x[646]))+ (0.16853738 * float(x[647]))+ (-2.175058 * float(x[648]))+ (-0.0049898066 * float(x[649])))+ ((-0.064343244 * float(x[650]))+ (0.10513568 * float(x[651]))+ (-1.0385247 * float(x[652]))+ (0.053626418 * float(x[653]))+ (-0.19760132 * float(x[654]))+ (-0.16626616 * float(x[655]))+ (-0.0625938 * float(x[656]))+ (-1.0619006 * float(x[657]))+ (4.032187 * float(x[658]))+ (-0.9714379 * float(x[659]))+ (1.546533 * float(x[660]))+ (3.6570926 * float(x[661]))+ (0.11781683 * float(x[662]))+ (5.361062 * float(x[663]))+ (-0.11664992 * float(x[664]))+ (-1.4142479 * float(x[665]))+ (4.103233 * float(x[666]))+ (0.66025937 * float(x[667]))+ (-1.8970013 * float(x[668]))+ (-1.0945309 * float(x[669]))+ (2.1356099 * float(x[670]))+ (-1.5902936 * float(x[671]))+ (-1.247318 * float(x[672]))+ (-1.1587148 * float(x[673]))+ (-1.1462431 * float(x[674]))+ (-0.6949507 * float(x[675]))+ (-0.8697937 * float(x[676]))+ (-1.2420404 * float(x[677]))+ (-1.5620028 * float(x[678]))+ (0.8116718 * float(x[679]))+ (-0.8576737 * float(x[680]))+ (-0.2120752 * float(x[681]))+ (-0.11820433 * float(x[682]))+ (2.7571454 * float(x[683]))+ (-1.910811 * float(x[684]))+ (0.18837072 * float(x[685]))+ (-1.0789015 * float(x[686]))+ (-1.5533767 * float(x[687]))+ (2.829389 * float(x[688]))+ (-3.303233 * float(x[689]))+ (-1.588596 * float(x[690]))+ (-0.43833795 * float(x[691]))+ (-0.09365157 * float(x[692]))+ (-0.6942661 * float(x[693]))+ (-1.7610137 * float(x[694]))+ (-0.9249309 * float(x[695]))+ (-0.9617308 * float(x[696]))+ (-0.51868564 * float(x[697]))+ (-1.4077139 * float(x[698]))+ (-1.2325943 * float(x[699])))+ ((-2.0981352 * float(x[700]))+ (-1.810747 * float(x[701]))+ (-1.5053293 * float(x[702]))+ (3.0188444 * float(x[703]))+ (4.3536687 * float(x[704]))+ (-0.70841134 * float(x[705]))+ (-1.0772382 * float(x[706]))+ (-1.1486412 * float(x[707]))+ (-0.36553395 * float(x[708]))+ (2.6168523 * float(x[709]))+ (-0.075041376 * float(x[710]))+ (2.2975318 * float(x[711]))+ (-1.5327652 * float(x[712]))+ (-1.3987525 * float(x[713]))+ (-1.277108 * float(x[714]))+ (-2.5011647 * float(x[715]))+ (-0.9783078 * float(x[716]))+ (-0.7411722 * float(x[717]))+ (-0.29156816 * float(x[718]))+ (-2.4657798 * float(x[719]))+ (3.0783021 * float(x[720]))+ (-1.4683034 * float(x[721]))+ (-0.3065017 * float(x[722]))+ (4.9025135 * float(x[723]))+ (-1.3600726 * float(x[724]))+ (-0.42882675 * float(x[725]))+ (0.08784486 * float(x[726]))+ (-0.9546364 * float(x[727]))+ (-0.7869865 * float(x[728]))+ (1.4315544 * float(x[729]))+ (1.3393161 * float(x[730]))+ (-0.20051454 * float(x[731]))+ (0.03473583 * float(x[732]))+ (-1.4145088 * float(x[733]))+ (2.1168718 * float(x[734]))+ (-0.6842354 * float(x[735]))+ (1.4557731 * float(x[736]))+ (-0.42046955 * float(x[737]))+ (3.1365418 * float(x[738]))+ (-0.17755435 * float(x[739]))+ (-0.83369005 * float(x[740]))+ (-1.5322167 * float(x[741]))+ (-1.6317459 * float(x[742]))+ (-1.1344897 * float(x[743]))+ (3.4198325 * float(x[744]))+ (-0.9148984 * float(x[745]))+ (-1.2032406 * float(x[746]))+ (-0.08785522 * float(x[747]))+ (-0.4961094 * float(x[748]))+ (-1.3137078 * float(x[749])))+ ((-0.43926638 * float(x[750]))+ (0.046197154 * float(x[751]))+ (-1.9767709 * float(x[752]))+ (-1.4438425 * float(x[753]))+ (0.6829046 * float(x[754]))+ (-0.8750254 * float(x[755]))+ (-1.5431476 * float(x[756]))+ (-1.0049045 * float(x[757]))+ (-1.2218602 * float(x[758]))+ (-1.8920487 * float(x[759]))+ (-1.8730716 * float(x[760]))+ (-0.9566246 * float(x[761]))+ (2.3459988 * float(x[762]))+ (0.10317374 * float(x[763]))+ (0.8010988 * float(x[764]))+ (0.42082277 * float(x[765]))+ (-2.6163409 * float(x[766]))+ (-0.37978688 * float(x[767]))+ (0.36147928 * float(x[768]))+ (-1.0388519 * float(x[769]))+ (-2.9022262 * float(x[770]))+ (0.8481766 * float(x[771]))+ (3.335853 * float(x[772]))+ (3.9691231 * float(x[773]))+ (2.3391926 * float(x[774]))+ (-1.3409787 * float(x[775]))+ (-0.3721645 * float(x[776]))+ (-0.99472725 * float(x[777]))+ (-1.1013663 * float(x[778]))+ (-0.45216817 * float(x[779]))+ (-1.3652749 * float(x[780]))+ (-1.6430682 * float(x[781]))+ (-0.32021067 * float(x[782]))+ (3.9135542 * float(x[783]))+ (0.5115776 * float(x[784]))+ (0.3707133 * float(x[785]))+ (-0.03234831 * float(x[786]))+ (0.031655222 * float(x[787]))+ (-0.2988024 * float(x[788]))+ (-2.1143825 * float(x[789]))+ (-1.6453322 * float(x[790]))+ (-0.3496322 * float(x[791]))+ (0.31035668 * float(x[792]))+ (-0.31757724 * float(x[793]))+ (-0.778019 * float(x[794]))+ (-1.415031 * float(x[795]))+ (-0.2106465 * float(x[796]))+ (0.5645037 * float(x[797]))+ (-2.413483 * float(x[798]))+ (-0.93005294 * float(x[799])))+ ((0.5278723 * float(x[800]))+ (-0.6263544 * float(x[801]))+ (-1.5560063 * float(x[802]))+ (-0.6133666 * float(x[803]))+ (-0.36675406 * float(x[804]))+ (-1.5288888 * float(x[805]))+ (-1.2651435 * float(x[806]))+ (4.6866264 * float(x[807]))+ (-1.3008796 * float(x[808]))+ (-0.784616 * float(x[809]))+ (-0.5838592 * float(x[810]))+ (-1.6127634 * float(x[811]))+ (1.9366337 * float(x[812]))+ (2.1151738 * float(x[813]))+ (0.66458243 * float(x[814]))+ (-1.7216314 * float(x[815]))+ (-0.77038443 * float(x[816]))+ (-1.5812739 * float(x[817]))+ (0.1923795 * float(x[818]))+ (6.707185 * float(x[819]))+ (-1.5426203 * float(x[820]))+ (1.1002982 * float(x[821]))+ (-1.1373675 * float(x[822]))+ (-0.48131043 * float(x[823]))+ (-1.3407724 * float(x[824]))+ (2.5940423 * float(x[825]))+ (-1.9388298 * float(x[826]))+ (-0.08894333 * float(x[827]))+ (-0.1869365 * float(x[828]))+ (-1.0731449 * float(x[829]))+ (-0.70683837 * float(x[830]))+ (-0.63156325 * float(x[831]))+ (-0.6089093 * float(x[832]))+ (-1.1131912 * float(x[833]))+ (-0.0556878 * float(x[834]))+ (-1.1771472 * float(x[835]))+ (-1.5232548 * float(x[836]))+ (-1.299591 * float(x[837]))+ (-1.9472767 * float(x[838]))+ (-0.9853263 * float(x[839]))+ (2.6164718 * float(x[840]))+ (0.07591667 * float(x[841]))+ (0.038503233 * float(x[842]))+ (-0.5920423 * float(x[843]))+ (-1.3211557 * float(x[844]))+ (-1.1212707 * float(x[845]))+ (-0.27281258 * float(x[846]))+ (-2.589398 * float(x[847]))+ (1.229388 * float(x[848]))+ (3.2720187 * float(x[849])))+ ((-0.34004438 * float(x[850]))+ (-1.5049537 * float(x[851]))+ (-1.6895161 * float(x[852]))+ (-0.32226604 * float(x[853]))+ (-1.6501681 * float(x[854]))+ (-1.7717959 * float(x[855]))+ (-0.58691776 * float(x[856]))+ (-0.75419813 * float(x[857]))+ (-1.5133203 * float(x[858]))+ (-1.1539755 * float(x[859]))+ (7.5995755 * float(x[860]))+ (1.1693814 * float(x[861]))+ (-0.20711227 * float(x[862]))+ (2.676729 * float(x[863]))+ (-0.8659033 * float(x[864]))+ (-0.97825897 * float(x[865]))+ (-0.6989681 * float(x[866]))+ (-0.23633339 * float(x[867]))+ (-1.2451539 * float(x[868]))+ (-1.5347176 * float(x[869]))+ (2.7295384 * float(x[870]))+ (-1.3345487 * float(x[871]))+ (-1.0453393 * float(x[872]))+ (2.3504763 * float(x[873]))+ (3.3458536 * float(x[874]))+ (-0.053901803 * float(x[875]))+ (-1.0066149 * float(x[876]))+ (0.33778644 * float(x[877]))+ (-0.41331914 * float(x[878]))+ (-0.8773185 * float(x[879]))+ (0.009349373 * float(x[880]))+ (-2.4870303 * float(x[881]))+ (-1.3124876 * float(x[882]))+ (-2.467166 * float(x[883]))+ (-1.577484 * float(x[884]))+ (-0.34735113 * float(x[885]))+ (0.38371962 * float(x[886]))+ (-0.16475551 * float(x[887]))+ (-1.5521618 * float(x[888]))+ (-0.3792128 * float(x[889]))+ (4.382405 * float(x[890]))+ (-0.20189478 * float(x[891]))+ (-1.7984126 * float(x[892]))+ (0.20419782 * float(x[893]))+ (0.65000695 * float(x[894]))+ (-0.056874916 * float(x[895]))+ (-0.34990165 * float(x[896]))+ (-2.1935036 * float(x[897]))+ (-0.24626039 * float(x[898]))+ (-1.5276351 * float(x[899])))+ ((-0.7373528 * float(x[900]))+ (-2.1361444 * float(x[901]))+ (-0.3116445 * float(x[902]))+ (0.073733754 * float(x[903]))+ (-0.46379954 * float(x[904]))+ (-1.9403458 * float(x[905]))+ (-3.4770513 * float(x[906]))+ (-0.6922927 * float(x[907]))+ (-1.0856285 * float(x[908]))+ (-0.13776088 * float(x[909]))+ (0.058660552 * float(x[910]))+ (-1.5159905 * float(x[911]))+ (-1.1228622 * float(x[912]))+ (-0.4765379 * float(x[913]))+ (-0.22036202 * float(x[914]))+ (-0.22670797 * float(x[915]))+ (-1.9067923 * float(x[916]))+ (0.013874034 * float(x[917]))+ (-1.6587666 * float(x[918]))+ (-0.528994 * float(x[919]))+ (-0.14529532 * float(x[920]))+ (-0.9463408 * float(x[921]))+ (-0.9976154 * float(x[922]))+ (-2.3898978 * float(x[923]))+ (-0.412827 * float(x[924]))+ (4.490082 * float(x[925]))+ (-0.09273103 * float(x[926]))+ (2.4804883 * float(x[927]))+ (0.7456919 * float(x[928]))+ (-0.32001552 * float(x[929]))+ (3.3732731 * float(x[930]))+ (-0.25217527 * float(x[931]))+ (-0.11345238 * float(x[932]))+ (-0.61287314 * float(x[933]))+ (-0.622986 * float(x[934]))+ (-1.2990752 * float(x[935]))+ (-0.93352157 * float(x[936]))+ (-1.0194681 * float(x[937]))+ (-0.939309 * float(x[938]))+ (0.41877052 * float(x[939]))+ (0.15531841 * float(x[940]))+ (0.49071926 * float(x[941]))+ (1.4360578 * float(x[942]))+ (2.5564373 * float(x[943]))+ (2.2854218 * float(x[944]))+ (-0.6983727 * float(x[945]))+ (-0.15894547 * float(x[946]))+ (-2.666574 * float(x[947]))+ (4.782129 * float(x[948]))+ (-0.6792941 * float(x[949])))+ ((-2.9077468 * float(x[950]))+ (7.080789 * float(x[951]))+ (-1.1292795 * float(x[952]))+ (-0.0064213583 * float(x[953]))+ (-2.7071953 * float(x[954]))+ (2.5751462 * float(x[955]))+ (-0.33002582 * float(x[956]))+ (0.64482033 * float(x[957]))+ (-0.14689016 * float(x[958]))+ (-0.35271826 * float(x[959]))+ (3.8530369 * float(x[960]))+ (-0.6921646 * float(x[961]))+ (-1.0045451 * float(x[962]))+ (2.0753958 * float(x[963]))+ (-1.4898446 * float(x[964]))+ (-2.0852668 * float(x[965]))+ (0.20763762 * float(x[966]))+ (3.312369 * float(x[967]))+ (3.0252333 * float(x[968]))+ (2.7760077 * float(x[969]))+ (-1.2232292 * float(x[970]))+ (-0.5187278 * float(x[971]))+ (3.3598092 * float(x[972]))+ (2.3178744 * float(x[973]))+ (-0.7939614 * float(x[974]))+ (-0.9307398 * float(x[975]))+ (3.3420372 * float(x[976]))+ (-0.06961528 * float(x[977]))+ (-0.54454535 * float(x[978]))+ (-0.7134875 * float(x[979]))+ (-1.0268861 * float(x[980]))+ (-0.8058292 * float(x[981]))+ (-1.2141439 * float(x[982]))+ (7.6252785 * float(x[983]))+ (-0.90785104 * float(x[984]))+ (-1.7991824 * float(x[985]))+ (1.9839463 * float(x[986]))+ (3.8636653 * float(x[987]))+ (0.06811534 * float(x[988]))+ (-0.5467735 * float(x[989]))+ (3.4272683 * float(x[990]))+ (-0.5501676 * float(x[991]))+ (0.28288087 * float(x[992]))+ (2.5201855 * float(x[993]))+ (-0.65897274 * float(x[994]))+ (-1.4949247 * float(x[995]))+ (-1.4678403 * float(x[996]))+ (-4.252922 * float(x[997]))+ (-0.16534814 * float(x[998]))+ (-0.13569984 * float(x[999])))+ ((-2.031798 * float(x[1000]))+ (-0.24572451 * float(x[1001]))+ (0.032731317 * float(x[1002]))+ (-1.6357392 * float(x[1003]))+ (-0.29425487 * float(x[1004]))+ (-0.92542 * float(x[1005]))+ (-0.35863224 * float(x[1006]))+ (3.7445471 * float(x[1007]))+ (1.8375257 * float(x[1008]))+ (4.22007 * float(x[1009]))+ (2.1899602 * float(x[1010]))+ (-0.948184 * float(x[1011]))+ (-0.22870386 * float(x[1012]))+ (-1.3793273 * float(x[1013]))+ (4.2598195 * float(x[1014]))+ (-0.40107188 * float(x[1015]))+ (3.2167563 * float(x[1016]))+ (2.901528 * float(x[1017]))+ (-2.1616254 * float(x[1018]))+ (0.7941931 * float(x[1019]))+ (-0.79679024 * float(x[1020]))+ (-6.8663015 * float(x[1021]))+ (3.8472996 * float(x[1022]))+ (-0.4215086 * float(x[1023]))+ (2.9294255 * float(x[1024]))+ (-1.5376935 * float(x[1025]))+ (-0.90962017 * float(x[1026]))+ (-0.19525844 * float(x[1027]))+ (-0.2767621 * float(x[1028]))+ (-0.42240325 * float(x[1029]))+ (-1.0157998 * float(x[1030]))+ (-0.34594384 * float(x[1031]))+ (-0.45110747 * float(x[1032]))+ (0.17679057 * float(x[1033]))+ (0.7625661 * float(x[1034]))+ (5.420592 * float(x[1035]))+ (-1.1863642 * float(x[1036]))+ (-1.0577108 * float(x[1037]))+ (-0.15367787 * float(x[1038]))+ (-0.21415977 * float(x[1039]))+ (3.119051 * float(x[1040]))+ (3.124862 * float(x[1041]))+ (2.4568372 * float(x[1042]))+ (-1.1688311 * float(x[1043]))+ (-0.644198 * float(x[1044]))+ (3.3060894 * float(x[1045]))+ (4.327161 * float(x[1046]))+ (-0.3747789 * float(x[1047]))+ (2.834861 * float(x[1048]))+ (2.9473054 * float(x[1049])))+ ((-1.5647125 * float(x[1050]))+ (-0.4837288 * float(x[1051]))+ (2.5621002 * float(x[1052]))+ (-1.6870642 * float(x[1053]))+ (2.5490637 * float(x[1054]))+ (3.8976376 * float(x[1055]))+ (-0.9207672 * float(x[1056]))+ (3.107929 * float(x[1057]))+ (2.9088142 * float(x[1058]))+ (-0.25166762 * float(x[1059]))+ (0.82736987 * float(x[1060]))+ (0.3307387 * float(x[1061]))+ (-0.51066065 * float(x[1062]))+ (1.9146883 * float(x[1063]))+ (-1.4969668 * float(x[1064]))+ (2.4502854 * float(x[1065]))+ (-0.49694943 * float(x[1066]))+ (-0.8243329 * float(x[1067]))+ (-1.2289366 * float(x[1068]))+ (-0.10858188 * float(x[1069]))+ (-1.0012349 * float(x[1070]))+ (-0.9710532 * float(x[1071]))+ (-1.558544 * float(x[1072]))+ (3.432738 * float(x[1073]))+ (2.933074 * float(x[1074]))+ (4.340349 * float(x[1075]))+ (-0.29467824 * float(x[1076]))+ (-0.5641259 * float(x[1077]))+ (-1.0868024 * float(x[1078]))+ (-0.234551 * float(x[1079]))+ (-0.8725959 * float(x[1080]))+ (5.086466 * float(x[1081]))+ (-0.79477495 * float(x[1082]))+ (-1.3398911 * float(x[1083]))+ (5.59179 * float(x[1084]))+ (-1.5264938 * float(x[1085]))+ (-2.938672 * float(x[1086]))+ (0.28256065 * float(x[1087]))+ (2.9718971 * float(x[1088]))+ (-0.45941293 * float(x[1089]))+ (1.0291835 * float(x[1090]))+ (-0.119231544 * float(x[1091]))+ (2.2863903 * float(x[1092]))+ (-0.899076 * float(x[1093]))+ (-0.4717547 * float(x[1094]))+ (-0.9357733 * float(x[1095]))+ (-0.020471485 * float(x[1096]))+ (3.7700198 * float(x[1097]))+ (-0.9402158 * float(x[1098]))+ (-1.412158 * float(x[1099])))+ ((4.543362 * float(x[1100]))+ (-1.2523636 * float(x[1101]))+ (3.473446 * float(x[1102]))+ (0.20145254 * float(x[1103]))+ (-0.026746422 * float(x[1104]))+ (-0.50933594 * float(x[1105]))+ (-1.8893661 * float(x[1106]))+ (-1.0049211 * float(x[1107]))+ (0.4048125 * float(x[1108]))+ (-3.4137435 * float(x[1109]))+ (4.0520644 * float(x[1110]))+ (-0.79786533 * float(x[1111]))+ (1.7046858 * float(x[1112]))+ (-1.4979132 * float(x[1113]))+ (-1.8786334 * float(x[1114]))+ (2.0759366 * float(x[1115]))+ (4.237306 * float(x[1116]))+ (-1.0961585 * float(x[1117]))+ (-0.29732698 * float(x[1118]))+ (-0.48513195 * float(x[1119]))+ (-0.7944999 * float(x[1120]))+ (-0.22646195 * float(x[1121]))+ (-0.13654293 * float(x[1122]))+ (-1.053964 * float(x[1123]))+ (-1.4381099 * float(x[1124]))+ (3.509171 * float(x[1125]))+ (-1.4726654 * float(x[1126]))+ (-0.41073745 * float(x[1127]))+ (2.5080884 * float(x[1128]))+ (3.4751885 * float(x[1129]))+ (2.8706813 * float(x[1130]))+ (2.083714 * float(x[1131]))+ (-0.50075495 * float(x[1132]))+ (-1.6307616 * float(x[1133]))+ (-1.6681811 * float(x[1134]))+ (1.840239 * float(x[1135]))+ (0.32340673 * float(x[1136]))+ (-0.8515877 * float(x[1137]))+ (-1.3562119 * float(x[1138]))+ (-1.5122575 * float(x[1139]))+ (3.444018 * float(x[1140]))+ (1.942221 * float(x[1141]))+ (-0.39690432 * float(x[1142]))+ (0.17562515 * float(x[1143]))+ (-0.9239802 * float(x[1144]))+ (-0.99468017 * float(x[1145]))+ (3.2281551 * float(x[1146]))+ (-1.4045224 * float(x[1147]))+ (2.2967725 * float(x[1148]))+ (3.0719767 * float(x[1149])))+ ((-0.39065215 * float(x[1150]))+ (-0.5115295 * float(x[1151]))+ (-0.98961306 * float(x[1152]))+ (0.78803587 * float(x[1153]))+ (-0.18568477 * float(x[1154]))+ (0.22799683 * float(x[1155]))+ (0.13171017 * float(x[1156]))+ (3.4028661 * float(x[1157]))+ (-3.071201 * float(x[1158]))+ (-0.5295214 * float(x[1159]))+ (0.13831905 * float(x[1160]))+ (-0.36384723 * float(x[1161]))+ (-0.6088498 * float(x[1162]))+ (-1.2140765 * float(x[1163]))+ (1.766549 * float(x[1164]))+ (3.6399052 * float(x[1165]))+ (-0.665213 * float(x[1166]))+ (4.020715 * float(x[1167]))+ (-1.724315 * float(x[1168]))+ (2.5142622 * float(x[1169]))+ (-1.8435045 * float(x[1170]))+ (-1.2378854 * float(x[1171]))+ (-1.0443757 * float(x[1172]))+ (-0.42668554 * float(x[1173]))+ (3.8146398 * float(x[1174]))+ (-1.24824 * float(x[1175]))+ (-0.34484982 * float(x[1176]))+ (3.758302 * float(x[1177]))+ (3.2322485 * float(x[1178]))+ (-0.29700598 * float(x[1179]))+ (0.17797098 * float(x[1180]))+ (0.18159878 * float(x[1181]))+ (-0.350036 * float(x[1182]))+ (-1.7164544 * float(x[1183]))+ (0.27534416 * float(x[1184]))+ (2.39801 * float(x[1185]))+ (-0.1604866 * float(x[1186]))+ (-1.3061175 * float(x[1187]))+ (4.082847 * float(x[1188]))+ (-0.3429921 * float(x[1189]))+ (2.5337713 * float(x[1190]))+ (-1.4703798 * float(x[1191]))+ (-0.13292241 * float(x[1192]))+ (0.4941388 * float(x[1193]))+ (1.326098 * float(x[1194]))+ (-1.5136319 * float(x[1195]))+ (-0.2820303 * float(x[1196]))+ (0.4926276 * float(x[1197]))+ (0.8911122 * float(x[1198]))+ (-0.43004316 * float(x[1199])))+ ((2.5694914 * float(x[1200]))+ (4.2498646 * float(x[1201]))+ (-0.12851396 * float(x[1202]))+ (2.3372653 * float(x[1203]))+ (2.7789223 * float(x[1204]))+ (-0.25094083 * float(x[1205]))+ (-1.4998678 * float(x[1206]))+ (-1.053851 * float(x[1207]))+ (3.232971 * float(x[1208]))+ (0.025037162 * float(x[1209]))+ (-0.09921181 * float(x[1210]))+ (2.9460824 * float(x[1211]))+ (-2.1854284 * float(x[1212]))+ (1.1187391 * float(x[1213]))+ (-0.21920447 * float(x[1214]))+ (-0.017727077 * float(x[1215]))+ (-2.2129178 * float(x[1216]))+ (-1.2527132 * float(x[1217]))+ (-0.5819749 * float(x[1218]))+ (2.9265246 * float(x[1219]))+ (2.4713497 * float(x[1220]))+ (1.7604929 * float(x[1221]))+ (0.081798516 * float(x[1222]))+ (2.0450332 * float(x[1223]))+ (2.625956 * float(x[1224]))+ (-0.5497065 * float(x[1225]))+ (-1.1694553 * float(x[1226]))+ (1.7373787 * float(x[1227]))+ (-2.236157 * float(x[1228]))+ (6.545791 * float(x[1229]))+ (0.7607944 * float(x[1230]))+ (-1.8138417 * float(x[1231]))+ (3.8789928 * float(x[1232]))+ (0.8579756 * float(x[1233]))+ (4.01951 * float(x[1234]))+ (2.521495 * float(x[1235]))+ (2.8897638 * float(x[1236]))+ (-1.1987731 * float(x[1237]))+ (-0.15101238 * float(x[1238]))+ (-2.762376 * float(x[1239]))+ (0.7605946 * float(x[1240]))+ (-0.33623132 * float(x[1241]))+ (0.429352 * float(x[1242]))+ (3.0372725 * float(x[1243]))+ (0.62136567 * float(x[1244]))+ (-1.8189871 * float(x[1245]))+ (0.3889372 * float(x[1246]))+ (3.676686 * float(x[1247]))+ (-1.1344432 * float(x[1248]))+ (0.18568307 * float(x[1249])))+ ((1.3140641 * float(x[1250]))+ (-0.39122242 * float(x[1251]))+ (-0.93528193 * float(x[1252]))+ (-0.43490693 * float(x[1253]))+ (0.46206215 * float(x[1254]))+ (-0.17923887 * float(x[1255]))+ (-1.7404603 * float(x[1256]))+ (3.7366602 * float(x[1257]))+ (2.5454931 * float(x[1258]))+ (-0.63586575 * float(x[1259]))+ (1.7994959 * float(x[1260]))+ (-1.7691834 * float(x[1261]))+ (2.3018491 * float(x[1262]))+ (-1.5111471 * float(x[1263]))+ (-3.0199726 * float(x[1264]))+ (3.7789989 * float(x[1265]))+ (3.7538784 * float(x[1266]))+ (-2.1205344 * float(x[1267]))+ (0.661869 * float(x[1268]))+ (-0.2751243 * float(x[1269]))+ (3.6817498 * float(x[1270]))+ (1.8460885 * float(x[1271]))+ (-1.229695 * float(x[1272]))+ (-1.3911487 * float(x[1273]))+ (0.36146152 * float(x[1274]))+ (-0.010080404 * float(x[1275]))+ (4.8096805 * float(x[1276]))+ (-1.0881414 * float(x[1277]))+ (1.5118316 * float(x[1278]))+ (-0.6588654 * float(x[1279]))+ (-0.6978893 * float(x[1280]))+ (-1.4628958 * float(x[1281]))+ (-0.35669702 * float(x[1282]))+ (2.5106847 * float(x[1283]))+ (3.3927574 * float(x[1284]))+ (-1.3967124 * float(x[1285]))+ (-2.7590063 * float(x[1286]))+ (-0.20390807 * float(x[1287]))+ (3.051962 * float(x[1288]))+ (-1.1452045 * float(x[1289]))+ (-1.3668542 * float(x[1290]))+ (-0.1514016 * float(x[1291]))+ (-0.815678 * float(x[1292]))+ (4.1928844 * float(x[1293]))+ (2.4176435 * float(x[1294]))+ (-0.5044389 * float(x[1295]))+ (1.8539536 * float(x[1296]))+ (-0.22592556 * float(x[1297]))+ (-0.39893562 * float(x[1298]))+ (-1.7639631 * float(x[1299])))+ ((-1.3145274 * float(x[1300]))+ (0.73657036 * float(x[1301]))+ (3.66148 * float(x[1302]))+ (-1.5779259 * float(x[1303]))+ (-0.445451 * float(x[1304]))+ (-1.4122419 * float(x[1305]))+ (4.261556 * float(x[1306]))+ (-0.1575945 * float(x[1307]))+ (-1.3800064 * float(x[1308]))+ (3.7691243 * float(x[1309]))+ (-1.3515464 * float(x[1310]))+ (3.7961626 * float(x[1311]))+ (2.9257858 * float(x[1312]))+ (-1.538832 * float(x[1313]))+ (-4.119916 * float(x[1314]))+ (1.2355081 * float(x[1315]))+ (-1.3986279 * float(x[1316]))+ (4.0061283 * float(x[1317]))+ (1.9892102 * float(x[1318]))+ (-0.36802062 * float(x[1319]))+ (-0.68066615 * float(x[1320]))+ (2.485659 * float(x[1321]))+ (0.01091706 * float(x[1322]))+ (-1.0098847 * float(x[1323]))+ (-0.012278142 * float(x[1324]))+ (-0.12418538 * float(x[1325]))+ (2.1178727 * float(x[1326]))+ (4.026269 * float(x[1327]))+ (0.26806265 * float(x[1328]))+ (-1.6352292 * float(x[1329]))+ (1.8512408 * float(x[1330]))+ (-0.70233595 * float(x[1331]))+ (-0.94537747 * float(x[1332]))+ (1.6697729 * float(x[1333]))+ (0.3010198 * float(x[1334]))+ (3.7263942 * float(x[1335]))+ (-0.61925316 * float(x[1336]))+ (2.5571582 * float(x[1337]))+ (3.3292515 * float(x[1338]))+ (3.5488203 * float(x[1339]))+ (-0.69622517 * float(x[1340]))+ (6.1288095 * float(x[1341]))+ (1.9753942 * float(x[1342]))+ (1.0096434 * float(x[1343]))+ (-0.11126137 * float(x[1344]))+ (4.2386646 * float(x[1345]))+ (2.084005 * float(x[1346]))+ (0.1837638 * float(x[1347]))+ (2.578818 * float(x[1348]))+ (-1.1610708 * float(x[1349])))+ ((-1.1363682 * float(x[1350]))+ (2.127845 * float(x[1351]))+ (-0.48384744 * float(x[1352]))+ (1.5710108 * float(x[1353]))+ (-0.1330092 * float(x[1354]))+ (3.9494293 * float(x[1355]))+ (-1.0694938 * float(x[1356]))+ (2.4217515 * float(x[1357]))+ (2.1807902 * float(x[1358]))+ (3.698911 * float(x[1359]))+ (-0.68431133 * float(x[1360]))+ (2.3666081 * float(x[1361]))+ (3.0600333 * float(x[1362]))+ (-0.24094136 * float(x[1363]))+ (-0.38882035 * float(x[1364]))+ (-0.76083034 * float(x[1365]))+ (-1.0288172 * float(x[1366]))+ (-0.063336976 * float(x[1367]))+ (-0.4328633 * float(x[1368]))+ (-0.8813382 * float(x[1369]))+ (-1.1532483 * float(x[1370]))+ (0.40729108 * float(x[1371]))+ (-1.2722672 * float(x[1372]))+ (0.3467395 * float(x[1373]))+ (-1.0743155 * float(x[1374]))+ (-0.7034853 * float(x[1375]))+ (5.296445 * float(x[1376]))+ (-1.5258482 * float(x[1377]))+ (-0.81964993 * float(x[1378]))+ (-1.1257443 * float(x[1379]))+ (4.3594184 * float(x[1380]))+ (-0.6251371 * float(x[1381]))+ (-1.5189786 * float(x[1382]))+ (3.2460184 * float(x[1383]))+ (-1.1000733 * float(x[1384]))+ (4.910668 * float(x[1385]))+ (-0.9237142 * float(x[1386]))+ (-1.8876553 * float(x[1387]))+ (-4.128632 * float(x[1388]))+ (-1.1625048 * float(x[1389]))+ (-0.96196735 * float(x[1390]))+ (3.2769945 * float(x[1391]))+ (1.8026541 * float(x[1392]))+ (1.9062281 * float(x[1393]))+ (0.18637376 * float(x[1394]))+ (3.7045338 * float(x[1395]))+ (-1.2830472 * float(x[1396]))+ (-1.3298581 * float(x[1397]))+ (2.6030931 * float(x[1398]))+ (5.873788 * float(x[1399])))+ ((3.101518 * float(x[1400]))+ (-1.6645371 * float(x[1401]))+ (3.8812318 * float(x[1402]))+ (-0.78604937 * float(x[1403]))+ (3.9629648 * float(x[1404]))+ (-1.050832 * float(x[1405]))+ (0.58153206 * float(x[1406]))+ (-2.5609965 * float(x[1407]))+ (2.9799693 * float(x[1408]))+ (0.5423334 * float(x[1409]))+ (2.618603 * float(x[1410]))+ (2.5275557 * float(x[1411]))+ (-0.8459587 * float(x[1412]))+ (4.086475 * float(x[1413]))+ (-1.0845492 * float(x[1414]))+ (-0.4710009 * float(x[1415]))+ (1.7951462 * float(x[1416]))+ (-1.169798 * float(x[1417]))+ (-1.3475038 * float(x[1418]))+ (0.50638074 * float(x[1419]))+ (-1.37326 * float(x[1420]))+ (-1.2093189 * float(x[1421]))+ (0.6662975 * float(x[1422]))+ (2.9216151 * float(x[1423]))+ (0.87714475 * float(x[1424]))+ (-0.8517293 * float(x[1425]))+ (-0.7364204 * float(x[1426]))+ (3.2213833 * float(x[1427]))+ (2.4026961 * float(x[1428]))+ (-1.095655 * float(x[1429]))+ (-0.5445308 * float(x[1430]))+ (-0.3591131 * float(x[1431]))+ (-1.022841 * float(x[1432]))+ (-3.6291018 * float(x[1433]))+ (0.06486461 * float(x[1434]))+ (1.571444 * float(x[1435]))+ (0.5077558 * float(x[1436]))+ (5.6018105 * float(x[1437]))+ (-1.2978438 * float(x[1438]))+ (-0.75672394 * float(x[1439]))+ (-1.3307048 * float(x[1440]))+ (-2.542279 * float(x[1441]))+ (1.3103065 * float(x[1442]))+ (-1.1313319 * float(x[1443]))+ (-0.98628986 * float(x[1444]))+ (6.2632995 * float(x[1445]))+ (-2.5572712 * float(x[1446]))+ (-0.6649479 * float(x[1447]))+ (-2.3687909 * float(x[1448]))+ (-1.5909111 * float(x[1449])))+ ((-3.4879997 * float(x[1450]))+ (-1.0885054 * float(x[1451]))+ (-2.419974 * float(x[1452]))+ (-2.835051 * float(x[1453]))+ (-1.5202962 * float(x[1454]))+ (3.789466 * float(x[1455]))+ (-0.2908985 * float(x[1456]))+ (-0.49406332 * float(x[1457]))+ (-4.349592 * float(x[1458]))+ (-1.512935 * float(x[1459]))+ (0.12214315 * float(x[1460]))+ (-2.6277788 * float(x[1461]))+ (-2.1344216 * float(x[1462]))+ (-0.6745786 * float(x[1463]))+ (1.6150769 * float(x[1464]))+ (1.6795341 * float(x[1465]))+ (-1.3103842 * float(x[1466]))+ (-1.4764086 * float(x[1467]))+ (-1.5697548 * float(x[1468]))+ (0.3869683 * float(x[1469]))+ (2.0153365 * float(x[1470]))+ (-0.1336621 * float(x[1471]))+ (-2.491407 * float(x[1472]))+ (-1.0164106 * float(x[1473]))+ (2.3656955 * float(x[1474]))+ (-2.5170135 * float(x[1475]))+ (-0.6126106 * float(x[1476]))+ (-0.63931555 * float(x[1477]))+ (-0.9204693 * float(x[1478]))+ (-1.4692022 * float(x[1479]))+ (-0.8837061 * float(x[1480]))+ (-1.174923 * float(x[1481]))+ (-3.6748185 * float(x[1482]))+ (3.570449 * float(x[1483]))+ (4.689688 * float(x[1484]))+ (0.46263477 * float(x[1485]))+ (-1.5397698 * float(x[1486]))+ (0.7872066 * float(x[1487]))+ (-1.4324282 * float(x[1488]))+ (-2.0269024 * float(x[1489]))+ (-3.1337833 * float(x[1490]))+ (-0.4331387 * float(x[1491]))+ (0.24939026 * float(x[1492]))+ (-3.0581877 * float(x[1493]))+ (1.2427192 * float(x[1494]))+ (0.65809333 * float(x[1495]))+ (-1.0211444 * float(x[1496]))+ (-1.8694142 * float(x[1497]))+ (-1.4235528 * float(x[1498]))+ (-0.7212122 * float(x[1499])))+ ((0.27093744 * float(x[1500]))+ (-0.68426734 * float(x[1501]))+ (-0.7538026 * float(x[1502]))+ (-0.33207127 * float(x[1503]))+ (-2.6017742 * float(x[1504]))+ (-1.0159245 * float(x[1505]))+ (-0.1176881 * float(x[1506]))+ (1.3441014 * float(x[1507]))+ (-0.8516785 * float(x[1508]))+ (-1.0108215 * float(x[1509]))+ (3.434591 * float(x[1510]))+ (-2.7317672 * float(x[1511]))+ (-0.8141714 * float(x[1512]))+ (2.2935252 * float(x[1513]))+ (1.4936178 * float(x[1514]))+ (-2.7163932 * float(x[1515]))+ (-0.17460123 * float(x[1516]))+ (-1.4372985 * float(x[1517]))+ (3.697333 * float(x[1518]))+ (-4.189522 * float(x[1519]))+ (0.13960305 * float(x[1520]))+ (-0.7095637 * float(x[1521]))+ (-0.40187073 * float(x[1522]))+ (-3.8135023 * float(x[1523]))+ (-1.075357 * float(x[1524]))+ (-0.48798528 * float(x[1525]))+ (0.91215444 * float(x[1526]))+ (2.1073458 * float(x[1527]))+ (-0.07746229 * float(x[1528]))+ (-1.5555457 * float(x[1529]))+ (-3.1942391 * float(x[1530]))+ (-1.5039903 * float(x[1531]))+ (4.268023 * float(x[1532]))+ (-0.93706596 * float(x[1533]))+ (-0.5714429 * float(x[1534]))+ (-2.0958757 * float(x[1535]))+ (-3.565079 * float(x[1536]))+ (-4.0130424 * float(x[1537]))+ (-0.4935173 * float(x[1538]))+ (-0.36500573 * float(x[1539]))+ (-1.0935856 * float(x[1540]))+ (0.75510454 * float(x[1541]))+ (-0.3861211 * float(x[1542]))+ (0.101351514 * float(x[1543]))+ (0.6609258 * float(x[1544]))+ (-1.1874597 * float(x[1545]))+ (-1.7516897 * float(x[1546]))+ (-1.9917846 * float(x[1547]))+ (-0.4767159 * float(x[1548]))+ (-1.7030431 * float(x[1549])))+ ((-0.4795655 * float(x[1550]))+ (-0.8505707 * float(x[1551]))+ (3.2972758 * float(x[1552]))+ (-1.1816686 * float(x[1553]))+ (0.09654968 * float(x[1554]))+ (0.87534165 * float(x[1555]))+ (-1.5432516 * float(x[1556]))+ (1.1052022 * float(x[1557]))) + -0.09185572), 0)
    o_0 = (3.7202935 * h_0)+ (0.5854564 * h_1) + -5.8399386
             
    if num_output_logits==1:
        return o_0>=0
    else:
        return argmax([eval('o'+str(i)) for i in range(num_output_logits)])

# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile',action='store_true',help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    args = parser.parse_args()

    if not args.validate: # Then predict
        if args.cleanfile:
            with open(args.csvfile,'r') as cleancsvfile:
                cleancsvreader = csv.reader(cleancsvfile)
                for cleanrow in cleancsvreader:
                    if len(cleanrow)==0:
                        continue
                print(str(','.join(str(j) for j in ([i for i in cleanrow])))+','+str(int(classify(cleanrow))))
        else:
            tempdir=tempfile.gettempdir()
            cleanfile=tempdir+os.sep+"clean.csv"
            clean(args.csvfile,cleanfile, -1, args.headerless, True)
            with open(cleanfile,'r') as cleancsvfile, open(args.csvfile,'r') as dirtycsvfile:
                cleancsvreader = csv.reader(cleancsvfile)
                dirtycsvreader = csv.reader(dirtycsvfile)
                if (not args.headerless):
                        print(','.join(next(dirtycsvreader, None)+['Prediction']))
                for cleanrow,dirtyrow in zip(cleancsvreader,dirtycsvreader):
                    if len(cleanrow)==0:
                        continue
                    print(str(','.join(str(j) for j in ([i for i in dirtyrow])))+','+str(int(classify(cleanrow))))
            os.remove(cleanfile)
            
    else: # Then validate this predictor
        tempdir=tempfile.gettempdir()
        temp_name = next(tempfile._get_candidate_names())
        cleanvalfile=tempdir+os.sep+temp_name
        clean(args.csvfile,cleanvalfile, -1, args.headerless)
        with open(cleanvalfile,'r') as valcsvfile:
            count,correct_count,num_TP,num_TN,num_FP,num_FN,num_class_1,num_class_0=0,0,0,0,0,0,0,0
            valcsvreader = csv.reader(valcsvfile)
            for valrow in valcsvreader:
                if len(valrow)==0:
                    continue
                if int(classify(valrow[:-1]))==int(float(valrow[-1])):
                    correct_count+=1
                    if int(float(valrow[-1]))==1:
                        num_class_1+=1
                        num_TP+=1
                    else:
                        num_class_0+=1
                        num_TN+=1
                else:
                    if int(float(valrow[-1]))==1:
                        num_class_1+=1
                        num_FN+=1
                    else:
                        num_class_0+=1
                        num_FP+=1
                count+=1

        model_cap=3121

        FN=float(num_FN)*100.0/float(count)
        FP=float(num_FP)*100.0/float(count)
        TN=float(num_TN)*100.0/float(count)
        TP=float(num_TP)*100.0/float(count)
        num_correct=correct_count

        if int(num_TP+num_FN)!=0:
            TPR=num_TP/(num_TP+num_FN) # Sensitivity, Recall
        if int(num_TN+num_FP)!=0:
            TNR=num_TN/(num_TN+num_FP) # Specificity, 
        if int(num_TP+num_FP)!=0:
            PPV=num_TP/(num_TP+num_FP) # Recall
        if int(num_FN+num_TP)!=0:
            FNR=num_FN/(num_FN+num_TP) # Miss rate
        if int(2*num_TP+num_FP+num_FN)!=0:
            FONE=2*num_TP/(2*num_TP+num_FP+num_FN) # F1 Score
        if int(num_TP+num_FN+num_FP)!=0:
            TS=num_TP/(num_TP+num_FN+num_FP) # Critical Success Index

        randguess=int(float(10000.0*max(num_class_1,num_class_0))/count)/100.0
        modelacc=int(float(num_correct*10000)/count)/100.0

        print("System Type:                        Binary classifier")
        print("Best-guess accuracy:                {:.2f}%".format(randguess))
        print("Model accuracy:                     {:.2f}%".format(modelacc)+" ("+str(int(num_correct))+"/"+str(count)+" correct)")
        print("Improvement over best guess:        {:.2f}%".format(modelacc-randguess)+" (of possible "+str(round(100-randguess,2))+"%)")
        print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
        print("Generalization ratio:               {:.2f}".format(int(float(num_correct*100)/model_cap)/100.0)+" bits/bit")
        print("Model efficiency:                   {:.2f}%/parameter".format(int(100*(modelacc-randguess)/model_cap)/100.0))
        print("System behavior")
        print("True Negatives:                     {:.2f}%".format(TN)+" ("+str(int(num_TN))+"/"+str(count)+")")
        print("True Positives:                     {:.2f}%".format(TP)+" ("+str(int(num_TP))+"/"+str(count)+")")
        print("False Negatives:                    {:.2f}%".format(FN)+" ("+str(int(num_FN))+"/"+str(count)+")")
        print("False Positives:                    {:.2f}%".format(FP)+" ("+str(int(num_FP))+"/"+str(count)+")")
        if int(num_TP+num_FN)!=0:
            print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
        if int(num_TN+num_FP)!=0:
            print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
        if int(num_TP+num_FP)!=0:
            print("Precision:                          {:.2f}".format(PPV))
        if int(2*num_TP+num_FP+num_FN)!=0:
            print("F-1 Measure:                        {:.2f}".format(FONE))
        if int(num_TP+num_FN)!=0:
            print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
        if int(num_TP+num_FN+num_FP)!=0:    
            print("Critical Success Index:             {:.2f}".format(TS))


        os.remove(cleanvalfile)

